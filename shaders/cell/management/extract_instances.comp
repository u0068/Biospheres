#version 430 core

layout(local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

// Input: Full cell data from physics simulation

struct AdhesionSettings
{
    bool canBreak;
    float breakForce;
    float restLength;
    float linearSpringStiffness;
    float linearSpringDamping;
    float orientationSpringStiffness;
    float orientationSpringDamping;
    float maxAngularDeviation; // degrees - 0 = strict orientation locking, >0 = flexible with max deviation
};

// GPU Mode structure
struct GPUMode {
    vec4 color;           // R, G, B, padding
    vec4 orientationA;    // quaternion
    vec4 orientationB;    // quaternion
    vec4 splitDirection;  // x, y, z, padding
    ivec2 childModes;     // mode indices for children
    float splitInterval;
    int genomeOffset;
    AdhesionSettings adhesionSettings;
    int parentMakeAdhesion; // Boolean flag for adhesion creation
    int childAKeepAdhesion; // Boolean flag for child A to keep adhesion
    int childBKeepAdhesion; // Boolean flag for child B to keep adhesion
    int padding[1];         // Padding to maintain alignment
};

// Cell data structure for compute shader
struct ComputeCell {
    // Physics:
    vec4 positionAndMass; // x, y, z, mass
    vec4 velocity;        // Fixed to match CPU layout
    vec4 acceleration;    // Fixed to match CPU layout
    vec4 orientation;     // angular stuff in quaternion to prevent gimbal lock
    vec4 angularVelocity;
    vec4 angularAcceleration;
    // Internal:
    vec4 signallingSubstances; // 4 substances for now
    int modeIndex;  // absolute index of the cell's mode
    float age; // also used for split timer
    float toxins;
    float nitrates;
    int adhesionIndices[20];
};

struct InstanceData {
    vec4 positionAndRadius;
    vec4 color;
    vec4 orientation;  // quaternion for rotation
};

layout(std430, binding = 0) buffer CellBuffer {
    // Cell structure: positionAndRadius, velocityAndMass, acceleration
    ComputeCell cellData[];
};

layout(std430, binding = 1) restrict buffer modeBuffer {
    GPUMode modes[];
};

// Output: Compact instance data for rendering
layout(std430, binding = 2) buffer InstanceBuffer {
    InstanceData instanceData[]; // Only position, radius and color
};

layout(std430, binding = 3) buffer CellCountBuffer {
    uint totalCellCount;
    uint liveCellCount;
    uint totalAdhesionCount;
    uint freeAdhesionTop;
};

void main() {
    uint index = gl_GlobalInvocationID.x;
    
    if (index >= totalCellCount) return;
    
    float myRadius = pow(cellData[index].positionAndMass.w, 1./3.);
    instanceData[index].positionAndRadius = vec4(cellData[index].positionAndMass.xyz, myRadius);
    instanceData[index].color = modes[cellData[index].modeIndex].color;
    instanceData[index].orientation = cellData[index].orientation;
}
