#version 430

layout(local_size_x = 64) in;

struct ComputeCell {
    vec4 positionAndMass;
    vec4 velocity;        // Fixed to match CPU layout
    vec4 acceleration;    // Fixed to match CPU layout
    vec4 orientation;
    vec4 angularVelocity;
    vec4 angularAcceleration;
    vec4 signallingSubstances;
    int modeIndex;
    float age;
    float toxins;
    float nitrates;
};

layout(std430, binding = 0) buffer CellAdditionQueue {
    ComputeCell newCells[];
};

layout(std430, binding = 1) buffer CellInputBuffer {
    ComputeCell inputCells[];
};

layout(std430, binding = 2) buffer CellOutputBuffer {
    ComputeCell outputCells[];
};

layout(std430, binding = 3) buffer CellCountBuffer {
    uint cellCount;
    uint adhesionCount;
};

uniform int u_maxCells;
uniform int u_pendingCellCount;

void main() {
    uint index = gl_GlobalInvocationID.x;
    if (index >= u_pendingCellCount) return;

    ComputeCell queuedCell = newCells[index];

    // FIXED: Calculate target index based on current cell count + queue index
    uint targetIndex = cellCount + index;
    
    // Check bounds
    if (targetIndex >= uint(u_maxCells)) return;

    // Safe to write to the buffers
    inputCells[targetIndex] = queuedCell;
    outputCells[targetIndex] = queuedCell;
    
    // Synchronize threads before updating count
    barrier();
    
    // Only the first thread updates the cell count after all cells are added
    if (index == 0) {
        cellCount = min(u_maxCells, cellCount + u_pendingCellCount); // Clamp cell count to ensure it can never exceed the limit
    }
}