#version 430

layout(local_size_x = 64) in;

// Cell data structure for compute shader
struct ComputeCell {
    // Physics:
    vec4 positionAndMass;   // x, y, z, mass
    vec4 velocity;          // x, y, z, padding
    vec4 acceleration;      // x, y, z, padding
    vec4 prevAcceleration;  // x, y, z, padding
    vec4 orientation;       // Quaternion to (prevent gimbal lock)
    vec4 angularVelocity;   // Pseudo-vector for easy math
    vec4 angularAcceleration;       // Pseudo-vector for easy math
    vec4 prevAngularAcceleration;   // Pseudo-vector for easy math
    // Internal:
    vec4 signallingSubstances; // 4 substances for now
    int modeIndex;  // absolute index of the cell's mode
    float age; // also used for split timer
    float toxins;
    float nitrates;
    int adhesionIndices[20];
    
    // Padding to maintain 16-byte alignment for the entire struct
    uint _padding[8];
};

layout(std430, binding = 0) buffer CellAdditionQueue {
    ComputeCell newCells[];
};

layout(std430, binding = 1) buffer CellInputBuffer {
    ComputeCell inputCells[];
};

layout(std430, binding = 2) buffer CellOutputBuffer {
    ComputeCell outputCells[];
};

layout(std430, binding = 3) coherent buffer CellCountBuffer {
    uint totalCellCount;
    uint liveCellCount;
    uint totalAdhesionCount;
    uint freeAdhesionTop;
};

layout(std430, binding = 4) coherent buffer UniqueIdBuffer {
    uint nextUniqueId;
};

uniform int u_maxCells;
uniform int u_pendingCellCount;

void main() {
    uint index = gl_GlobalInvocationID.x;
    if (index >= u_pendingCellCount) return;

    ComputeCell queuedCell = newCells[index];

    // FIXED: Calculate target index based on current cell count + queue index
    uint targetIndex = totalCellCount + index;
    
    // Check bounds
    if (targetIndex >= uint(u_maxCells)) return;

    
    // Safe to write to the buffers
    inputCells[targetIndex] = queuedCell;
    outputCells[targetIndex] = queuedCell;
    
    // Synchronize threads before updating count
    barrier();
    
    // Only the first thread updates the cell count after all cells are added
    if (index == 0) {
        // CRITICAL FIX: Check bounds before updating to prevent overflow
        uint newTotalCount = totalCellCount + u_pendingCellCount;
        uint newLiveCount = liveCellCount + u_pendingCellCount;
        
        if (newTotalCount <= uint(u_maxCells)) {
            totalCellCount = newTotalCount;
            liveCellCount = newLiveCount;
        } else {
            // Clamp to maximum
            totalCellCount = uint(u_maxCells);
            liveCellCount = uint(u_maxCells);
        }
    }
}
