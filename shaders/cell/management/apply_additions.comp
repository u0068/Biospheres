#version 430
#extension GL_ARB_gpu_shader_int64 : enable

layout(local_size_x = 64) in;

struct ComputeCell {
    vec4 positionAndMass;
    vec4 velocity;        // Fixed to match CPU layout
    vec4 acceleration;    // Fixed to match CPU layout
    vec4 orientation;
    vec4 angularVelocity;
    vec4 angularAcceleration;
    vec4 signallingSubstances;
    int modeIndex;
    float age;
    float toxins;
    float nitrates;
    // Unique ID system
    uint cellIndex;        // Simple cell index
    uint justSplit;        // Just split flag
    uint padding2[2];    // Additional padding to ensure 16-byte alignment
};

layout(std430, binding = 0) buffer CellAdditionQueue {
    ComputeCell newCells[];
};

layout(std430, binding = 1) buffer CellInputBuffer {
    ComputeCell inputCells[];
};

layout(std430, binding = 2) buffer CellOutputBuffer {
    ComputeCell outputCells[];
};

layout(std430, binding = 3) buffer CellCountBuffer {
    uint cellCount;
    uint pendingCellCount;
};

uniform int u_maxCells;

void main() {
    uint index = gl_GlobalInvocationID.x;
    if (index >= pendingCellCount) return;

    ComputeCell queuedCell = newCells[index];

    // FIXED: Calculate target index based on current cell count + queue index
    uint targetIndex = cellCount + index;
    
    // Check bounds
    if (targetIndex >= uint(u_maxCells)) return;

    // Safe to write to the buffers
    inputCells[targetIndex] = queuedCell;
    outputCells[targetIndex] = queuedCell;
    
    // Count this cell as successfully added
    atomicAdd(cellCount, 1);
}