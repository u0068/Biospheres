#version 430 core

layout(local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

struct ComputeCell {
    vec4 positionAndMass;
    vec4 velocity;
    vec4 acceleration;
    vec4 orientation;
    vec4 angularVelocity;
    vec4 angularAcceleration;
    vec4 signallingSubstances;
    int modeIndex;
    float age;
    float toxins;
    float nitrates;
};

// Input/Output buffer (we compact in-place)
layout(std430, binding = 0) buffer CellBuffer {
    ComputeCell cells[];
};

// Dead cell markers (1 = dead, 0 = alive)
layout(std430, binding = 1) buffer DeadMarkersBuffer {
    uint deadMarkers[];
};

// Prefix sum buffer for compaction
layout(std430, binding = 2) buffer PrefixSumBuffer {
    uint prefixSum[];
};

// Dead indices buffer (sorted list of dead cell indices)
layout(std430, binding = 3) buffer DeadIndicesBuffer {
    uint deadIndices[];
};

// Count buffers
layout(std430, binding = 4) buffer CellCountBuffer {
    uint cellCount;
    uint adhesionCount;
    uint liveCellCount;
    uint liveAdhesionCount;
};

uniform int u_maxCells;

// Shared memory for efficient prefix sum
shared uint sharedData[256];

// Function to check if a cell is dead
bool isCellDead(ComputeCell cell) {
    return cell.age < 0.0 || 
           (cell.positionAndMass.w <= 0.0 && length(cell.positionAndMass.xyz) < 0.001) ||
           cell.modeIndex < 0;
}

// Function to create a dead cell marker
ComputeCell createDeadCell() {
    ComputeCell deadCell;
    deadCell.age = -1.0;
    deadCell.modeIndex = -1;
    deadCell.positionAndMass = vec4(0.0, 0.0, 0.0, 0.0);
    return deadCell;
}

void main() {
    uint index = gl_GlobalInvocationID.x;
    uint localIndex = gl_LocalInvocationID.x;
    
    if (index >= u_maxCells) {
        return;
    }
    
    // Phase 1: Mark dead cells
    if (index < cellCount) {
        ComputeCell cell = cells[index];
        deadMarkers[index] = isCellDead(cell) ? 1u : 0u;
    } else {
        deadMarkers[index] = 1u; // Mark out-of-bounds as dead
    }
    
    barrier();
    
    // Phase 2: Efficient prefix sum using shared memory
    // Load data into shared memory
    if (index < cellCount) {
        sharedData[localIndex] = deadMarkers[index];
    } else {
        sharedData[localIndex] = 0u;
    }
    
    barrier();
    
    // Parallel prefix sum (Kogge-Stone algorithm)
    for (uint stride = 1; stride < 256; stride *= 2) {
        uint temp = 0;
        if (localIndex >= stride) {
            temp = sharedData[localIndex - stride];
        }
        barrier();
        if (localIndex >= stride) {
            sharedData[localIndex] += temp;
        }
        barrier();
    }
    
    // Store prefix sum result
    if (index < cellCount) {
        prefixSum[index] = sharedData[localIndex];
    }
    
    barrier();
    
    // Phase 3: Calculate live cell positions and move cells
    if (index < cellCount) {
        uint deadCount = prefixSum[index];
        uint livePosition = index - deadCount;
        
        if (deadMarkers[index] == 0u) {
            // This is a live cell, move it to its new position
            if (livePosition != index) {
                ComputeCell cell = cells[index];
                cells[livePosition] = cell;
                cells[index] = createDeadCell(); // Mark old position as dead
            }
        } else {
            // This is a dead cell, add to dead indices buffer
            uint deadIndex = deadCount - 1; // Convert to 0-based index
            if (deadIndex < u_maxCells) {
                deadIndices[deadIndex] = index;
            }
        }
    }
    
    barrier();
    
    // Phase 4: Update live cell count (only first thread)
    if (index == 0 && cellCount > 0) {
        uint totalDead = prefixSum[cellCount - 1];
        liveCellCount = cellCount - totalDead;
    }
} 