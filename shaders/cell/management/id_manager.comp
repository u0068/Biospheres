#version 430 core
#extension GL_ARB_gpu_shader_int64 : enable

layout(local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

// Cell data structure for compute shader
struct ComputeCell {
    vec4 positionAndMass; // x, y, z, mass
    vec4 velocity;        // Fixed to match CPU layout
    vec4 acceleration;    // Fixed to match CPU layout
    vec4 orientation; // angular stuff in quaternion to prevent gimbal lock
    vec4 angularVelocity;
    vec4 angularAcceleration;
    vec4 signallingSubstances; // 4 substances for now
    int modeIndex;
    float age; // also used for split timer
    float toxins;
    float nitrates;
    // Unique ID system
    uint64_t uniqueID;     // Packed ID: [parent(32)] [cell(31)] [child(1)]
    uint64_t padding1;     // Padding to maintain alignment
    uint padding2[4];    // Additional padding to ensure 16-byte alignment
};

// Shader storage buffer objects
layout(std430, binding = 0) buffer CellBuffer {
    ComputeCell cells[];
};

layout(std430, binding = 1) buffer CellCountBuffer {
    uint cellCount;
    uint pendingCellCount;
};

layout(std430, binding = 2) buffer IDCounterBuffer {
    uint nextAvailableID;    // Next ID to assign
    uint recycledIDCount;    // Number of recycled IDs available
    uint maxCellID;          // Maximum cell ID (2147483647)
    uint deadCellCount;      // Number of dead cells found this frame
};

layout(std430, binding = 3) buffer IDPoolBuffer {
    uint availableIDs[];     // Pool of available/recycled cell IDs
};

layout(std430, binding = 4) buffer IDRecycleBuffer {
    uint deadCellIDs[];      // IDs from dead cells to be recycled
};

uniform int u_maxCells;
uniform float u_minMass;  // Minimum mass to consider a cell alive

// ID utility functions
uint getCellID(uint64_t uniqueID) {
    return uint((uniqueID >> 1) & 0x7FFFFFFFu);
}

void main() {
    uint index = gl_GlobalInvocationID.x;
    
    // Phase 1: Collect dead cell IDs for recycling
    if (index < cellCount) {
        ComputeCell cell = cells[index];
        
        // Check if cell is dead (mass below threshold)
        if (cell.positionAndMass.w < u_minMass) {
            uint cellID = getCellID(cell.uniqueID);
            
            // Only recycle non-zero IDs
            if (cellID > 0) {
                uint deadIndex = atomicAdd(deadCellCount, 1);
                if (deadIndex < uint(u_maxCells)) {
                    deadCellIDs[deadIndex] = cellID;
                }
            }
        }
    }
    
    // Phase 2: Move dead cell IDs to the recycling pool
    // This runs after all threads have finished Phase 1
    barrier();
    
    if (index < deadCellCount) {
        uint deadID = deadCellIDs[index];
        uint poolIndex = atomicAdd(recycledIDCount, 1);
        
        // Make sure we don't overflow the pool
        if (poolIndex < uint(u_maxCells)) {
            availableIDs[poolIndex] = deadID;
        }
    }
    
    // Reset dead cell count for next frame (only first thread does this)
    if (index == 0) {
        deadCellCount = 0;
    }
} 