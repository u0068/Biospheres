#version 430 core

layout(local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

// Cell data structure matching the one in the main simulation
struct ComputeCell {
    vec4 positionAndMass; // x, y, z, mass
    vec4 velocity;        // Fixed to match CPU layout
    vec4 acceleration;    // Fixed to match CPU layout
    vec4 orientation;     // quaternion: w, x, y, z
    vec4 angularVelocity;
    vec4 angularAcceleration;
    vec4 signallingSubstances;
    int modeIndex;
    float age;
    float toxins;
    float nitrates;
    // Unique ID system
    uint uniqueID;     // Packed ID: [parent(16)] [cell(15)] [child(1)]
    uint padding1;     // Padding to maintain alignment
    uvec2 padding2;    // Additional padding to ensure 16-byte alignment
};

// GPU Mode structure
struct GPUMode {
    vec4 color;           // R, G, B, padding
    vec4 orientationA;    // quaternion
    vec4 orientationB;    // quaternion
    vec4 splitDirection;  // x, y, z, padding
    ivec2 childModes;     // mode indices for children
    float splitInterval;
    int genomeOffset;
    int parentMakeAdhesion; // Boolean flag for adhesion creation
    int padding;          // Padding to maintain alignment
};

// Adhesion connection structure - stores permanent connections between sibling cells
struct AdhesionConnection {
    uint cellAIndex;      // Index of first cell in the connection
    uint cellBIndex;      // Index of second cell in the connection
    uint parentID;        // Parent ID that both cells share
    uint isActive;        // Whether this connection is still active (1 = active, 0 = inactive)
};

// Input: Cell data
layout(std430, binding = 0) buffer CellBuffer {
    ComputeCell cells[];
};

// Input: Mode data
layout(std430, binding = 1) buffer ModeBuffer {
    GPUMode modes[];
};

// Input: Spatial grid data
layout(std430, binding = 2) buffer GridBuffer {
    uint gridCells[];  // Stores cell indices for each grid cell
};

layout(std430, binding = 3) buffer GridCountBuffer {
    uint gridCounts[];
};

// Output: Adhesion connections
layout(std430, binding = 4) buffer AdhesionConnectionBuffer {
    AdhesionConnection connections[];
};

// Cell count
layout(std430, binding = 5) buffer CellCountBuffer {
    uint cellCount;
    uint pendingCellCount;
};

// Uniforms
uniform int u_gridResolution;
uniform float u_gridCellSize;
uniform float u_worldSize;
uniform int u_maxCellsPerGrid;
uniform int u_maxConnections;

// Extract parent ID from unique ID
uint getParentID(uint uniqueID) {
    return (uniqueID >> 16) & 0xFFFF;
}

// Extract cell ID from unique ID
uint getCellID(uint uniqueID) {
    return (uniqueID >> 1) & 0x7FFF;
}

// Extract child flag from unique ID (0 = child A, 1 = child B)
uint getChildFlag(uint uniqueID) {
    return uniqueID & 0x1;
}

// Function to convert world position to grid coordinates
ivec3 worldToGrid(vec3 worldPos) {
    // Clamp to world bounds first
    vec3 clampedPos = clamp(worldPos, vec3(-u_worldSize * 0.5), vec3(u_worldSize * 0.5));
    
    // Convert to grid coordinates [0, gridResolution)
    vec3 normalizedPos = (clampedPos + u_worldSize * 0.5) / u_worldSize;
    ivec3 gridPos = ivec3(normalizedPos * u_gridResolution);
    
    // Ensure we stay within bounds
    return clamp(gridPos, ivec3(0), ivec3(u_gridResolution - 1));
}

// Function to convert 3D grid coordinates to 1D index
uint gridToIndex(ivec3 gridPos) {
    return uint(gridPos.x + gridPos.y * u_gridResolution + gridPos.z * u_gridResolution * u_gridResolution);
}

// Function to check if grid coordinates are valid
bool isValidGridPos(ivec3 gridPos) {
    return gridPos.x >= 0 && gridPos.x < u_gridResolution &&
           gridPos.y >= 0 && gridPos.y < u_gridResolution &&
           gridPos.z >= 0 && gridPos.z < u_gridResolution;
}

void main() {
    uint index = gl_GlobalInvocationID.x;
    
    if (index >= cellCount) {
        return;
    }
    
    ComputeCell currentCell = cells[index];
    
    // Skip cells with no parent (initial spawned cells)
    uint parentID = getParentID(currentCell.uniqueID);
    if (parentID == 0) {
        return;
    }
    
    // Get the parent's mode to check if adhesion is enabled
    if (currentCell.modeIndex < 0 || currentCell.modeIndex >= modes.length()) {
        return;
    }
    
    GPUMode parentMode = modes[currentCell.modeIndex];
    
    // Skip if parent doesn't make adhesion
    if (parentMode.parentMakeAdhesion == 0) {
        return;
    }
    
    // Only process child A to avoid duplicate connections (child B will be found by child A)
    uint childFlag = getChildFlag(currentCell.uniqueID);
    if (childFlag != 0) {
        return; // Skip child B
    }
    
    // Debug: If we get here, we have a child A cell with adhesion enabled
    // We can't output from compute shaders, but we can ensure this cell tries to find its sibling
    
    // Look for sibling (child B with same parent ID) using spatial grid
    uint siblingIndex = 0xFFFFFFFF; // Invalid index
    
    // Get current cell's grid position
    vec3 currentPos = currentCell.positionAndMass.xyz;
    ivec3 currentGridPos = worldToGrid(currentPos);
    
    // Search in current grid cell and neighboring cells for sibling
    for (int dx = -1; dx <= 1; dx++) {
        for (int dy = -1; dy <= 1; dy++) {
            for (int dz = -1; dz <= 1; dz++) {
                ivec3 searchGridPos = currentGridPos + ivec3(dx, dy, dz);
                
                if (!isValidGridPos(searchGridPos)) {
                    continue;
                }
                
                uint searchGridIndex = gridToIndex(searchGridPos);
                uint cellCountInGrid = gridCounts[searchGridIndex];
                
                // Search through cells in this grid cell
                for (uint i = 0; i < cellCountInGrid && i < u_maxCellsPerGrid; i++) {
                    uint gridCellIndex = searchGridIndex * u_maxCellsPerGrid + i;
                    uint otherCellIndex = gridCells[gridCellIndex];
                    
                    if (otherCellIndex >= cellCount || otherCellIndex == index) {
                        continue; // Skip invalid indices and self
                    }
                    
                    ComputeCell otherCell = cells[otherCellIndex];
                    uint otherParentID = getParentID(otherCell.uniqueID);
                    uint otherChildFlag = getChildFlag(otherCell.uniqueID);
                    
                    // Check if it's our sibling (same parent, different child flag)
                    if (otherParentID == parentID && otherChildFlag == 1) {
                        siblingIndex = otherCellIndex;
                        break;
                    }
                }
                
                if (siblingIndex != 0xFFFFFFFF) {
                    break; // Found sibling, exit search
                }
            }
            if (siblingIndex != 0xFFFFFFFF) {
                break; // Found sibling, exit search
            }
        }
        if (siblingIndex != 0xFFFFFFFF) {
            break; // Found sibling, exit search
        }
    }
    
    // If no sibling found, no connection to create
    if (siblingIndex == 0xFFFFFFFF) {
        return;
    }
    
    // Create the adhesion connection
    // Use atomic operation to get a unique connection index
    uint connectionIndex = atomicAdd(connections[0].cellAIndex, 1); // Use first element as counter
    
    // Ensure we don't exceed the maximum connections
    if (connectionIndex >= u_maxConnections) {
        return;
    }
    
    // Store the connection (offset by 1 to skip the counter element)
    uint actualIndex = connectionIndex + 1;
    if (actualIndex < u_maxConnections) {
        connections[actualIndex].cellAIndex = index;
        connections[actualIndex].cellBIndex = siblingIndex;
        connections[actualIndex].parentID = parentID;
        connections[actualIndex].isActive = 1;
    }
} 