#version 430 core

layout(local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

// Cell data structure for compute shader
struct ComputeCell {
    // Physics:
    vec4 positionAndMass; // x, y, z, mass
    vec4 velocity;        // Fixed to match CPU layout
    vec4 acceleration;    // Fixed to match CPU layout
    vec4 orientation;     // angular stuff in quaternion to prevent gimbal lock
    vec4 angularVelocity;
    vec4 angularAcceleration;
    // Internal:
    vec4 signallingSubstances; // 4 substances for now
    int modeIndex;  // absolute index of the cell's mode
    float age; // also used for split timer
    float toxins;
    float nitrates;
    int adhesionIndices[20];
};

// Shader storage buffer objects
layout(std430, binding = 0) restrict buffer ReadCellBuffer {
    ComputeCell inputCells[];
};

layout(std430, binding = 1) restrict buffer WriteCellBuffer {
    ComputeCell outputCells[];
};

layout(std430, binding = 2) coherent buffer CellCountBuffer {
    uint totalCellCount;
    uint liveCellCount;
    uint totalAdhesionCount;
    uint freeAdhesionTop;
};

// Uniforms
uniform float u_deltaTime;
uniform float u_damping;
uniform int u_draggedCellIndex; // Index of cell being dragged (-1 if none)

// Quaternion multiplication function
vec4 quatMultiply(vec4 q1, vec4 q2) {
    return vec4(
        q1.w*q2.x + q1.x*q2.w + q1.y*q2.z - q1.z*q2.y,
        q1.w*q2.y - q1.x*q2.z + q1.y*q2.w + q1.z*q2.x,
        q1.w*q2.z + q1.x*q2.y - q1.y*q2.x + q1.z*q2.w,
        q1.w*q2.w - q1.x*q2.x - q1.y*q2.y - q1.z*q2.z
    );
}

void main() {
    uint index = gl_GlobalInvocationID.x;
    
    // Check bounds
    if (index >= totalCellCount) {
        return;
    }
    
    // Skip position and orientation updates for dragged cell - these are set directly by dragging
    if (int(index) == u_draggedCellIndex) {
        return;
    }

    ComputeCell cell = inputCells[index];
    
    cell.age += u_deltaTime;

    // Update velocity based on acceleration
    cell.velocity.xyz += cell.acceleration.xyz * u_deltaTime;
    
    // Apply damping
    cell.velocity.xyz *= pow(u_damping, u_deltaTime*100.);
    
    // Update position based on velocity (Euler integration)
    cell.positionAndMass.xyz += cell.velocity.xyz * u_deltaTime;
    
    // Update angular velocity based on angular acceleration
    cell.angularVelocity.xyz += cell.angularAcceleration.xyz * u_deltaTime;
    
    // Apply angular damping
    cell.angularVelocity.xyz *= pow(u_damping, u_deltaTime*100.);
    
    // Update orientation based on angular velocity
    // Convert angular velocity to quaternion derivative and integrate
    vec3 angularVel = cell.angularVelocity.xyz;
    float angularSpeed = length(angularVel);
    
    if (angularSpeed > 0.001) {
        // Normalize angular velocity to get rotation axis
        vec3 rotationAxis = angularVel / angularSpeed;
        
        // Create quaternion for this rotation
        float halfAngle = angularSpeed * u_deltaTime * 0.5;
        vec4 rotationQuat = vec4(rotationAxis * sin(halfAngle), cos(halfAngle));
        
        // Apply rotation to current orientation
        cell.orientation = quatMultiply(cell.orientation, rotationQuat);
        cell.orientation = normalize(cell.orientation);
    }
    
    // Optional: Add boundary constraints here
    // For example, keep cells within a certain bounds
    vec3 pos = cell.positionAndMass.xyz;
    float bounds = 50.0;
    
    if (abs(pos.x) > bounds) {
        cell.positionAndMass.x = sign(pos.x) * bounds;
        cell.velocity.x *= -0.8; // Bounce with energy loss
    }
    if (abs(pos.y) > bounds) {
        cell.positionAndMass.y = sign(pos.y) * bounds;
        cell.velocity.y *= -0.8;
    }
    if (abs(pos.z) > bounds) {
        cell.positionAndMass.z = sign(pos.z) * bounds;
        cell.velocity.z *= -0.8;
    }

    outputCells[index] = cell; // Write updated cell back to output buffer
}
