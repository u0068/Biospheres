#version 430 core

layout(local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

struct AdhesionSettings
{
    bool canBreak;
    float breakForce;
    float restLength;
    float linearSpringStiffness;
    float linearSpringDamping;
    float orientationSpringStiffness;
    float orientationSpringDamping;
    float maxAngularDeviation; // degrees - 0 = strict orientation locking, >0 = flexible with max deviation
};

// GPU Mode structure
struct GPUMode {
    vec4 color;           // R, G, B, padding
    vec4 orientationA;    // quaternion
    vec4 orientationB;    // quaternion
    vec4 splitDirection;  // x, y, z, padding
    ivec2 childModes;     // mode indices for children
    float splitInterval;
    int genomeOffset;
    AdhesionSettings adhesionSettings;
    int parentMakeAdhesion; // Boolean flag for adhesion creation
    int childAKeepAdhesion; // Boolean flag for child A to keep adhesion
    int childBKeepAdhesion; // Boolean flag for child B to keep adhesion
    int maxAdhesions;       // Max number of adhesions
};

// Cell data structure for compute shader
struct ComputeCell {
    // Physics:
    vec4 positionAndMass; // x, y, z, mass
    vec4 velocity;        // Fixed to match CPU layout
    vec4 acceleration;    // Fixed to match CPU layout
    vec4 orientation;     // angular stuff in quaternion to prevent gimbal lock
    vec4 angularVelocity;
    vec4 angularAcceleration;
    // Internal:
    vec4 signallingSubstances; // 4 substances for now
    int modeIndex;  // absolute index of the cell's mode
    float age; // also used for split timer
    float toxins;
    float nitrates;
    int adhesionIndices[20];
};

// Adhesion connection structure - stores permanent connections between sibling cells
struct AdhesionConnection {
    uint cellAIndex;      // Index of first cell in the connection
    uint cellBIndex;      // Index of second cell in the connection
    uint modeIndex;       // Mode index for the connection ( to lookup adhesion settings )
    uint isActive;        // Whether this connection is still active (1 = active, 0 = inactive)
};

// Input Cell data
layout(std430, binding = 0) restrict buffer ReadCellBuffer {
    ComputeCell inputCells[];
};

// Input: Mode data
layout(std430, binding = 1) buffer ModeBuffer {
    GPUMode modes[];
};

layout(std430, binding = 2) buffer AdhesionConnectionBuffer {
    AdhesionConnection connections[];
};

// Cell count
layout(std430, binding = 3) buffer CellCountBuffer {
    uint totalCellCount;
    uint liveCellCount;
    uint totalAdhesionCount;
    uint freeAdhesionTop;
};

// Output Cell data
layout(std430, binding = 4) restrict buffer WriteCellBuffer {
    ComputeCell outputCells[];
};

// Uniforms
uniform float u_deltaTime;

float getRadius(ComputeCell cell) {
    float mass = cell.positionAndMass.w; // mass is stored in w component 
    return pow(mass, 1./3.);
}

// Quaternion math functions for orientation locking
vec4 quatMultiply(vec4 q1, vec4 q2) {
    return vec4(
        q1.w*q2.x + q1.x*q2.w + q1.y*q2.z - q1.z*q2.y,
        q1.w*q2.y - q1.x*q2.z + q1.y*q2.w + q1.z*q2.x,
        q1.w*q2.z + q1.x*q2.y - q1.y*q2.x + q1.z*q2.w,
        q1.w*q2.w - q1.x*q2.x - q1.y*q2.y - q1.z*q2.z
    );
}

vec4 quatConjugate(vec4 q) {
    return vec4(-q.xyz, q.w);
}

vec4 quatInverse(vec4 q) {
    float norm = dot(q, q);
    if (norm > 0.0) {
        return quatConjugate(q) / norm;
    }
    return vec4(0.0, 0.0, 0.0, 1.0);
}

vec3 rotateVectorByQuaternion(vec3 v, vec4 q) {
    vec3 u = q.xyz;
    float s = q.w;
    return 2.0 * dot(u, v) * u + (s * s - dot(u, u)) * v + 2.0 * s * cross(u, v);
}

// Convert quaternion to axis-angle representation
vec4 quatToAxisAngle(vec4 q) {
    float angle = 2.0 * acos(clamp(q.w, -1.0, 1.0));
    vec3 axis;
    if (angle < 0.001) {
        axis = vec3(1.0, 0.0, 0.0);
    } else {
        axis = normalize(q.xyz / sin(angle * 0.5));
    }
    return vec4(axis, angle);
}

// Convert axis-angle to quaternion
vec4 axisAngleToQuat(vec4 axisAngle) {
    float halfAngle = axisAngle.w * 0.5;
    float s = sin(halfAngle);
    return vec4(axisAngle.xyz * s, cos(halfAngle));
}

void main() {
    uint index = gl_GlobalInvocationID.x;
    
    if (index >= totalCellCount) {
        return;
    }

    ComputeCell cell = inputCells[index];
    
    // Reset accelerations for this frame
    cell.acceleration = vec4(0.0);
    cell.angularAcceleration = vec4(0.0);

    // Apply forces for each adhesion connection
    for (int i = 0; i < 20; ++i) {
        int adhesionIndex = cell.adhesionIndices[i];
        if (adhesionIndex < 0) continue; // No adhesion connection
        AdhesionConnection connection = connections[adhesionIndex];
        if (connection.isActive == 0) continue; // Inactive connection
        uint otherIndex = (connection.cellAIndex == index) ? connection.cellBIndex : connection.cellAIndex;
        ComputeCell otherCell = inputCells[otherIndex];
        
        AdhesionSettings settings = modes[connection.modeIndex].adhesionSettings;
        
        // Linear spring force (position-based)
        vec3 deltaPosition = otherCell.positionAndMass.xyz - cell.positionAndMass.xyz;
        float springLength = length(deltaPosition);
        if (springLength < 0.0001) continue; // Prevent division by zero
        
        vec3 forceDirection = normalize(deltaPosition);
        float forceMagnitude = settings.linearSpringStiffness * (springLength - settings.restLength - getRadius(cell) - getRadius(otherCell));
        vec3 springForce = forceDirection * forceMagnitude;
        
        // Apply linear damping
        vec3 relativeVelocity = otherCell.velocity.xyz - cell.velocity.xyz;
        float dampingForceMagnitude = settings.linearSpringDamping * dot(relativeVelocity, forceDirection);
        springForce -= forceDirection * dampingForceMagnitude;
        
        // Update linear acceleration
        cell.acceleration.xyz += springForce / cell.positionAndMass.w;
        
        // Orientation locking/constraint
        if (settings.maxAngularDeviation >= 0.0) {
            // Calculate the relative orientation between the two cells
            vec4 relativeOrientation = quatMultiply(quatInverse(cell.orientation), otherCell.orientation);
            
            // Convert to axis-angle representation
            vec4 axisAngle = quatToAxisAngle(relativeOrientation);
            float currentAngle = abs(axisAngle.w);
            
            // Check if we need to apply orientation constraint
            float maxAngleRadians = radians(settings.maxAngularDeviation);
            bool needsConstraint = (settings.maxAngularDeviation == 0.0) || (currentAngle > maxAngleRadians);
            
            if (needsConstraint) {
                // Calculate the target orientation that respects the constraint
                vec4 targetRelativeOrientation;
                
                if (settings.maxAngularDeviation == 0.0) {
                    // Strict locking: force identical orientation
                    targetRelativeOrientation = vec4(0.0, 0.0, 0.0, 1.0); // Identity quaternion
                } else {
                    // Flexible constraint: clamp to max deviation
                    float clampedAngle = min(currentAngle, maxAngleRadians);
                    targetRelativeOrientation = axisAngleToQuat(vec4(axisAngle.xyz, clampedAngle));
                }
                
                // Calculate the orientation correction needed
                vec4 orientationCorrection = quatMultiply(relativeOrientation, quatInverse(targetRelativeOrientation));
                
                // Convert correction to angular velocity
                vec4 correctionAxisAngle = quatToAxisAngle(orientationCorrection);
                vec3 angularCorrection = correctionAxisAngle.xyz * correctionAxisAngle.w;
                
                // Apply orientation spring force
                vec3 orientationForce = angularCorrection * settings.orientationSpringStiffness;
                
                // Apply orientation damping
                vec3 relativeAngularVelocity = otherCell.angularVelocity.xyz - cell.angularVelocity.xyz;
                vec3 orientationDamping = relativeAngularVelocity * settings.orientationSpringDamping;
                
                // Update angular acceleration
                cell.angularAcceleration.xyz += (orientationForce - orientationDamping) / cell.positionAndMass.w;
            }
        }
    }

    outputCells[index] = cell; // Write the updated cell back to output buffer
} 