#version 430 core

layout(local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

struct AdhesionSettings
{
    bool canBreak;
    float breakForce;
    float restLength;
    float linearSpringStiffness;
    float linearSpringDamping;
    float orientationSpringStiffness;
    float orientationSpringDamping;
    float maxAngularDeviation; // degrees - 0 = strict orientation locking, >0 = flexible with max deviation
};

// GPU Mode structure
struct GPUMode {
    vec4 color;           // R, G, B, padding
    vec4 orientationA;    // quaternion
    vec4 orientationB;    // quaternion
    vec4 splitDirection;  // x, y, z, padding
    ivec2 childModes;     // mode indices for children
    float splitInterval;
    int genomeOffset;
    AdhesionSettings adhesionSettings;
    int parentMakeAdhesion; // Boolean flag for adhesion creation
    int childAKeepAdhesion; // Boolean flag for child A to keep adhesion
    int childBKeepAdhesion; // Boolean flag for child B to keep adhesion
    int maxAdhesions;       // Max number of adhesions
};

// Cell data structure for compute shader
struct ComputeCell {
    // Physics:
    vec4 positionAndMass; // x, y, z, mass
    vec4 velocity;        // Fixed to match CPU layout
    vec4 acceleration;    // Fixed to match CPU layout
    vec4 orientation;     // angular stuff in quaternion to prevent gimbal lock
    vec4 angularVelocity;
    vec4 angularAcceleration;
    // Internal:
    vec4 signallingSubstances; // 4 substances for now
    int modeIndex;  // absolute index of the cell's mode
    float age; // also used for split timer
    float toxins;
    float nitrates;
    int adhesionIndices[20];
};

// Adhesion connection structure - stores permanent connections between sibling cells
struct AdhesionConnection {
    uint cellAIndex;      // Index of first cell in the connection
    uint cellBIndex;      // Index of second cell in the connection
    uint modeIndex;       // Mode index for the connection ( to lookup adhesion settings )
    uint isActive;        // Whether this connection is still active (1 = active, 0 = inactive)
};

// Input Cell data
layout(std430, binding = 0) restrict buffer ReadCellBuffer {
    ComputeCell inputCells[];
};

// Input: Mode data
layout(std430, binding = 1) buffer ModeBuffer {
    GPUMode modes[];
};

layout(std430, binding = 2) buffer AdhesionConnectionBuffer {
    AdhesionConnection connections[];
};

// Cell count
layout(std430, binding = 3) buffer CellCountBuffer {
    uint totalCellCount;
    uint liveCellCount;
    uint totalAdhesionCount;
    uint freeAdhesionTop;
};

// Output Cell data
layout(std430, binding = 4) restrict buffer WriteCellBuffer {
    ComputeCell outputCells[];
};

// Uniforms
uniform float u_deltaTime;
uniform int u_draggedCellIndex; // Index of cell being dragged (-1 if none)

float getRadius(ComputeCell cell) {
    float mass = cell.positionAndMass.w; // mass is stored in w component 
    return pow(mass, 1./3.);
}

// Quaternion math functions for orientation locking
vec4 quatMultiply(vec4 q1, vec4 q2) {
    return vec4(
        q1.w*q2.x + q1.x*q2.w + q1.y*q2.z - q1.z*q2.y,
        q1.w*q2.y - q1.x*q2.z + q1.y*q2.w + q1.z*q2.x,
        q1.w*q2.z + q1.x*q2.y - q1.y*q2.x + q1.z*q2.w,
        q1.w*q2.w - q1.x*q2.x - q1.y*q2.y - q1.z*q2.z
    );
}

vec4 quatConjugate(vec4 q) {
    return vec4(-q.xyz, q.w);
}

vec4 quatInverse(vec4 q) {
    float norm = dot(q, q);
    if (norm > 0.0) {
        return quatConjugate(q) / norm;
    }
    return vec4(0.0, 0.0, 0.0, 1.0);
}

vec3 rotateVectorByQuaternion(vec3 v, vec4 q) {
    vec3 u = q.xyz;
    float s = q.w;
    return 2.0 * dot(u, v) * u + (s * s - dot(u, u)) * v + 2.0 * s * cross(u, v);
}

// Convert quaternion to axis-angle representation
vec4 quatToAxisAngle(vec4 q) {
    float angle = 2.0 * acos(clamp(q.w, -1.0, 1.0));
    vec3 axis;
    if (angle < 0.001) {
        axis = vec3(1.0, 0.0, 0.0);
    } else {
        axis = normalize(q.xyz / sin(angle * 0.5));
    }
    return vec4(axis, angle);
}

// Convert axis-angle to quaternion
vec4 axisAngleToQuat(vec4 axisAngle) {
    float halfAngle = axisAngle.w * 0.5;
    float s = sin(halfAngle);
    return vec4(axisAngle.xyz * s, cos(halfAngle));
}

void computeAdhesionForces(
    ComputeCell A, ComputeCell B,
    GPUMode adhesionMode,
    out vec3 forceA, out vec3 torqueA,
    out vec3 forceB, out vec3 torqueB
) {
    forceA = vec3(0.0); torqueA = vec3(0.0);
    forceB = vec3(0.0); torqueB = vec3(0.0);
    
    AdhesionSettings settings = adhesionMode.adhesionSettings;

    vec3 deltaPos = B.positionAndMass.xyz - A.positionAndMass.xyz;
    float dist = length(deltaPos);
    if (dist < 0.0001) return;
    
    vec3 dir = deltaPos / dist;
    float restLength = settings.restLength + getRadius(A) + getRadius(B);
    
    // Linear spring
    float forceMag = settings.linearSpringStiffness * (dist - restLength);
    vec3 springForce = dir * forceMag;

    // Damping - oppose relative motion
    vec3 relVel = B.velocity.xyz - A.velocity.xyz;
    float dampMag = settings.linearSpringDamping * dot(relVel, dir);
    vec3 dampingForce = -dir * dampMag; // Negative to oppose motion

    forceA += springForce + dampingForce;
    forceB -= springForce + dampingForce;

    // Calculate tangential correction forces to align anchor points
    // This ensures cells move to correct positions, not just rotate
    float radiusA = getRadius(A);
    float radiusB = getRadius(B);
    
    // Calculate actual anchor directions in local space
    vec3 anchorA = rotateVectorByQuaternion(adhesionMode.splitDirection.xyz, A.orientation);
    vec3 anchorB = rotateVectorByQuaternion(-adhesionMode.splitDirection.xyz, B.orientation);
    
    // Connection direction from A to B
    vec3 connectionDir = normalize(deltaPos);
    
    // Calculate tangential forces to align anchor positions with cell connection
    // Get actual anchor positions in world space
    vec3 anchorPosA = A.positionAndMass.xyz + anchorA * radiusA;
    vec3 anchorPosB = B.positionAndMass.xyz + anchorB * radiusB;
    
    // Calculate the vector between anchor positions
    vec3 anchorConnection = anchorPosB - anchorPosA;
    
    // Calculate how much the anchor connection deviates from the cell connection
    vec3 connectionError = anchorConnection - deltaPos;
    
    // Remove the radial component (only keep tangential misalignment)
    connectionError -= dot(connectionError, connectionDir) * connectionDir;
    
    // Apply equal and opposite tangential forces to correct the misalignment
    // Force should oppose the error to reduce it
    float amplification = 50.0; // Significantly amplify the tangential correction
    vec3 tangentialForce = -connectionError * settings.orientationSpringStiffness * amplification;
    
    forceA += tangentialForce;
    forceB -= tangentialForce;

    // Orientation spring: try to align anchor with adhesion vector
    // Now that tangential forces are working correctly, add back rotational correction
    // These work together - tangential forces move cells into position, rotational forces align orientation
    vec3 adhesionDir = normalize(deltaPos);

    vec3 axisA = cross(anchorA, adhesionDir);
    float sinA = length(axisA);
    float cosA = dot(anchorA, adhesionDir);
    float angleA = atan(sinA, cosA);
    if (sinA > 0.0001) {
        axisA = normalize(axisA);
        // Orientation spring and damping
        vec3 springTorqueA = axisA * angleA * settings.orientationSpringStiffness;
        vec3 dampingTorqueA = axisA * dot(A.angularVelocity.xyz, axisA) * settings.orientationSpringDamping;
        torqueA -= springTorqueA + dampingTorqueA;
    }

    vec3 axisB = cross(anchorB, -adhesionDir);
    float sinB = length(axisB);
    float cosB = dot(anchorB, -adhesionDir);
    float angleB = atan(sinB, cosB);
    if (sinB > 0.0001) {
        axisB = normalize(axisB);
        // Orientation spring and damping
        vec3 springTorqueB = axisB * angleB * settings.orientationSpringStiffness;
        vec3 dampingTorqueB = axisB * dot(B.angularVelocity.xyz, axisB) * settings.orientationSpringDamping;
        torqueB -= springTorqueB + dampingTorqueB;
    }

    // Convert forces to torques based on lever arms (force application points)
    // Forces are applied at the adhesion anchors, but physics integration happens at center of mass
    // (radiusA and radiusB already calculated above)
    
    // Lever arms: from center of mass to force application points
    vec3 leverArmA = anchorA * radiusA;
    vec3 leverArmB = anchorB * radiusB;
    
    // Convert forces to torques: τ = r × F
    vec3 totalForceA = springForce + dampingForce + tangentialForce;
    vec3 totalForceB = -(springForce + dampingForce) - tangentialForce;
    vec3 forceTorqueA = cross(leverArmA, totalForceA);
    vec3 forceTorqueB = cross(leverArmB, totalForceB);
    
    // For momentum conservation: total torque on system should be zero
    // Cell A gets: orientation torque A + force torque A - force torque B
    // Cell B gets: orientation torque B + force torque B - force torque A
    torqueA += forceTorqueA - forceTorqueB;
    torqueB += forceTorqueB - forceTorqueA;
}

void main() {
    uint index = gl_GlobalInvocationID.x;
    
    if (index >= totalCellCount) {
        return;
    }

    ComputeCell thisCell = inputCells[index];
    
    // For dragged cells, we still want to calculate adhesion forces for connected cells,
    // but we'll skip applying forces TO the dragged cell itself
    bool isDraggedCell = (int(index) == u_draggedCellIndex);
    
    if (isDraggedCell) {
        // Copy input to output but clear acceleration for dragged cell
        outputCells[index] = inputCells[index];
        outputCells[index].acceleration = vec4(0.0);
        outputCells[index].angularAcceleration = vec4(0.0);
        // Don't return here - we still need to process adhesions that involve this cell
    }
    

    // Apply forces for each adhesion connection
    for (int i = 0; i < 20; ++i) {
        int adhesionIndex = thisCell.adhesionIndices[i];
        if (adhesionIndex < 0) continue; // No adhesion connection
        AdhesionConnection connection = connections[adhesionIndex];
        if (connection.isActive == 0) continue; // Inactive connection
        bool isCellA = (connection.cellAIndex == index);
        uint otherIndex        = isCellA ? connection.cellBIndex : connection.cellAIndex;
        ComputeCell otherCell  = inputCells[otherIndex];
        
        ComputeCell cellA = isCellA ? thisCell : otherCell;
        ComputeCell cellB = isCellA ? otherCell : thisCell;

        //GPUMode thisMode      = modes[thisCell.modeIndex];
        //GPUMode otherMode     = modes[otherCell.modeIndex];

        GPUMode adhesionMode = modes[connection.modeIndex];

        vec3 fA, tA, fB, tB;
        computeAdhesionForces(cellA, cellB, adhesionMode, fA, tA, fB, tB);

        // Only apply forces to this cell if it's not being dragged
        if (!isDraggedCell) {
            if (isCellA) {
                thisCell.acceleration.xyz += fA / thisCell.positionAndMass.w;
                // Torque needs to be divided by moment of inertia (for sphere: 2/5 * m * r^2)
                float radius = getRadius(thisCell);
                float momentOfInertia = 0.4 * thisCell.positionAndMass.w * radius * radius;
                thisCell.angularAcceleration.xyz += tA / momentOfInertia;
            } else {
                thisCell.acceleration.xyz += fB / thisCell.positionAndMass.w;
                // Torque needs to be divided by moment of inertia (for sphere: 2/5 * m * r^2)
                float radius = getRadius(thisCell);
                float momentOfInertia = 0.4 * thisCell.positionAndMass.w * radius * radius;
                thisCell.angularAcceleration.xyz += tB / momentOfInertia;
            }
        }
    }

    // Write the updated cell back to output buffer
    // If this is a dragged cell, thisCell acceleration is already cleared above
    // If not dragged, thisCell has been updated with adhesion forces
    if (!isDraggedCell) {
        outputCells[index] = thisCell;
    }
    // Note: dragged cell output was already written above with cleared accelerations
} 