#version 430 core

layout(local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

// Cell data structure matching the one in the main simulation
struct ComputeCell {
    vec4 positionAndMass; // x, y, z, mass
    vec4 velocity;        // Fixed to match CPU layout
    vec4 acceleration;    // Fixed to match CPU layout
    vec4 orientation;     // quaternion: w, x, y, z
    vec4 angularVelocity;
    vec4 angularAcceleration;
    vec4 signallingSubstances;
    int modeIndex;
    float age;
    float toxins;
    float nitrates;
};

struct AdhesionSettings
{
    bool canBreak;
    float breakForce;
    float restLength;
    float linearSpringStiffness;
    float linearSpringDamping;
    float orientationSpringStiffness;
    float orientationSpringDamping;
    float maxAngularDeviation; // degrees
};

// GPU Mode structure
struct GPUMode {
    vec4 color;           // R, G, B, padding
    vec4 orientationA;    // quaternion
    vec4 orientationB;    // quaternion
    vec4 splitDirection;  // x, y, z, padding
    ivec2 childModes;     // mode indices for children
    float splitInterval;
    int genomeOffset;
    AdhesionSettings adhesionSettings;
    int parentMakeAdhesion; // Integer flag for adhesion creation (0 = false, 1 = true)
    int padding[3];          // Padding to maintain alignment
};

// Adhesion connection structure - stores permanent connections between sibling cells
struct AdhesionConnection {
    uint cellAIndex;      // Index of first cell in the connection
    uint cellBIndex;      // Index of second cell in the connection
    uint parentID;        // Parent ID that both cells share
    uint isActive;        // Whether this connection is still active (1 = active, 0 = inactive)
    uint modeIndex;       // Mode index for the connection (to lookup adhesion settings)
};

// Input: Cell data
layout(std430, binding = 0) buffer CellBuffer {
    ComputeCell cells[];
};

// Input: Mode data
layout(std430, binding = 1) buffer ModeBuffer {
    GPUMode modes[];
};

// Input: Spatial grid data
layout(std430, binding = 2) buffer GridBuffer {
    uint gridCells[];  // Stores cell indices for each grid cell
};

layout(std430, binding = 3) buffer GridCountBuffer {
    uint gridCounts[];
};

layout(std430, binding = 4) buffer AdhesionConnectionBuffer {
    AdhesionConnection connections[];
};

// Cell count
layout(std430, binding = 5) buffer CellCountBuffer {
    uint cellCount;
    uint pendingCellCount;
    uint adhesionCount;
};

// Uniforms
uniform int u_gridResolution;
uniform float u_gridCellSize;
uniform float u_worldSize;
uniform int u_maxCellsPerGrid;
uniform int u_maxConnections;
uniform float u_deltaTime;

// Function to convert world position to grid coordinates
ivec3 worldToGrid(vec3 worldPos) {
    // Clamp to world bounds first
    vec3 clampedPos = clamp(worldPos, vec3(-u_worldSize * 0.5), vec3(u_worldSize * 0.5));
    
    // Convert to grid coordinates [0, gridResolution)
    vec3 normalizedPos = (clampedPos + u_worldSize * 0.5) / u_worldSize;
    ivec3 gridPos = ivec3(normalizedPos * u_gridResolution);
    
    // Ensure we stay within bounds
    return clamp(gridPos, ivec3(0), ivec3(u_gridResolution - 1));
}

// Function to convert 3D grid coordinates to 1D index
uint gridToIndex(ivec3 gridPos) {
    return uint(gridPos.x + gridPos.y * u_gridResolution + gridPos.z * u_gridResolution * u_gridResolution);
}

// Function to check if grid coordinates are valid
bool isValidGridPos(ivec3 gridPos) {
    return gridPos.x >= 0 && gridPos.x < u_gridResolution &&
           gridPos.y >= 0 && gridPos.y < u_gridResolution &&
           gridPos.z >= 0 && gridPos.z < u_gridResolution;
}

void main() {
    uint index = gl_GlobalInvocationID.x;
    
    if (index >= adhesionCount) {
        return;
    }
    
    // Process adhesion connections
    AdhesionConnection connection = connections[index];
    
    // Skip inactive adhesions
    if (connection.isActive == 0) {
        return;
    }
    
    // Check if the mode that created this adhesion has parentMakeAdhesion enabled
    GPUMode mode = modes[connection.modeIndex];
            if (mode.parentMakeAdhesion == 0) {
        return; // Skip physics if parentMakeAdhesion is false
    }
    
    // Get the two cells involved in this adhesion
    ComputeCell cellA = cells[connection.cellAIndex];
    ComputeCell cellB = cells[connection.cellBIndex];
    
    // Calculate the vector from cell A to cell B
    vec3 deltaPos = cellB.positionAndMass.xyz - cellA.positionAndMass.xyz;
    float distance = length(deltaPos);
    
    if (distance > 0.0) {
        vec3 direction = deltaPos / distance;
        
        // Get adhesion settings from the mode
        GPUMode mode = modes[connection.modeIndex];
        
        // Calculate spring force based on rest length
        float restLength = 2.0; // Default rest length
        float springStiffness = 5.0; // Default spring stiffness
        float springDamping = 0.5; // Default damping
        
        float displacement = distance - restLength;
        vec3 springForce = direction * displacement * springStiffness;
        
        // Calculate damping force based on relative velocity
        vec3 relativeVelocity = cellB.velocity.xyz - cellA.velocity.xyz;
        vec3 dampingForce = direction * dot(relativeVelocity, direction) * springDamping;
        
        // Total force
        vec3 totalForce = springForce - dampingForce;
        
        // Apply forces to both cells (equal and opposite)
        // Note: In a real implementation, you'd need to use atomic operations
        // to safely update multiple cells from different threads
        // For now, this is a simplified version
        
        // Update cell A
        cellA.acceleration.xyz += totalForce / cellA.positionAndMass.w;
        cells[connection.cellAIndex] = cellA;
        
        // Update cell B  
        cellB.acceleration.xyz -= totalForce / cellB.positionAndMass.w;
        cells[connection.cellBIndex] = cellB;
    }
} 