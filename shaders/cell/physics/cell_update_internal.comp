#version 430 core
#extension GL_ARB_gpu_shader_int64 : enable

layout(local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

struct GPUMode {
    vec4 color;             // r, g, b, padding
    vec4 orientationA;      // quaternion
    vec4 orientationB;      // quaternion
    vec4 splitDirection;  // x, y, z, padding
    ivec2 childModes;
    float splitInterval;
    int genomeOffset;
};

struct ComputeCell {
    vec4 positionAndMass;
    vec4 velocity;        // Fixed to match CPU layout
    vec4 acceleration;    // Fixed to match CPU layout
    vec4 orientation;
    vec4 angularVelocity;
    vec4 angularAcceleration;
    vec4 signallingSubstances;
    int modeIndex;
    float age;
    float toxins;
    float nitrates;
    // Simple index-based ID system
    uint cellIndex;        // Simple cell index
    uint justSplit;        // Use this as the justSplit flag
    uint padding2[2];    // Additional padding to ensure 16-byte alignment
};

layout(std430, binding = 0) restrict buffer modeBuffer {
    GPUMode modes[];
};

layout(std430, binding = 1) restrict buffer CellBuffer {
    ComputeCell cells[];
};

layout(std430, binding = 2) buffer CellAdditionQueue {
    ComputeCell newCells[];
};

layout(std430, binding = 3) buffer CellCountBuffer {
    uint cellCount;
    uint pendingCellCount;
};



// Adhesion management buffers
layout(std430, binding = 4) buffer AdhesionAdditionQueue {
    uint cellIndexA[100000];
    uint cellIndexB[100000];
    float breakForce[100000];
    float restLength[100000];
    float linearSpringStiffness[100000];
    float linearSpringDamping[100000];
    float orientationSpringStrength[100000];
    float maxAngularDeviation[100000];
    uint isActive[100000];
    uint padding[3];
};

layout(std430, binding = 5) buffer AdhesionCountBuffer {
    uint adhesionCount;
    uint pendingAdhesionCount;
};

uniform float u_deltaTime;
uniform int u_maxCells;

vec4 quatMultiply(vec4 q1, vec4 q2) {
    return vec4(
        q1.w*q2.x + q1.x*q2.w + q1.y*q2.z - q1.z*q2.y,
        q1.w*q2.y - q1.x*q2.z + q1.y*q2.w + q1.z*q2.x,
        q1.w*q2.z + q1.x*q2.y - q1.y*q2.x + q1.z*q2.w,
        q1.w*q2.w - q1.x*q2.x - q1.y*q2.y - q1.z*q2.z
    );
}

vec3 rotateVectorByQuaternion(vec3 v, vec4 q) {
    // v' = q * v * q^-1
    // Optimized version using cross product:
    vec3 u = q.xyz;
    float s = q.w;

    return 2.0 * dot(u, v) * u
         + (s * s - dot(u, u)) * v
         + 2.0 * s * cross(u, v);
}



void main() {
    uint index = gl_GlobalInvocationID.x;
    if (index >= cellCount) {
        return;
    }
    ComputeCell cell = cells[index]; // Read from current buffer
    GPUMode mode = modes[cell.modeIndex];

    cell.age += u_deltaTime;
    if (cell.age >= mode.splitInterval) {
        // Atomically check limit and reserve space in a single operation
        uint queueIdx = atomicAdd(pendingCellCount, 1);
        if (cellCount + queueIdx < u_maxCells) {
            vec3 offset = rotateVectorByQuaternion(mode.splitDirection.xyz, cell.orientation) * 0.5;

            float startAge = cell.age - mode.splitInterval;

            vec4 q_parent = cell.orientation;
            vec4 q_childA = normalize(quatMultiply(q_parent, mode.orientationA));
            vec4 q_childB = normalize(quatMultiply(q_parent, mode.orientationB));

            ComputeCell childA = cell;
            childA.positionAndMass.xyz += offset;
            childA.age = startAge;
            childA.modeIndex = mode.childModes.x;
            childA.orientation = q_childA;
            childA.cellIndex = index; // Parent becomes childA
            childA.justSplit = 1;

            ComputeCell childB = cell;
            childB.positionAndMass.xyz -= offset;
            childB.age = startAge;
            childB.modeIndex = mode.childModes.y;
            childB.orientation = q_childB;
            childB.cellIndex = cellCount + queueIdx; // New cell gets next index
            childB.justSplit = 1;

            cells[index] = childA;
            newCells[queueIdx] = childB;
            
            // Create adhesion between parent and children if the mode specifies it
            // For now, create a simple adhesion with default settings
            uint adhesionQueueIdx = atomicAdd(pendingAdhesionCount, 2); // Create 2 adhesions
            
            // Adhesion between parent (childA) and childB
            cellIndexA[adhesionQueueIdx] = index;
            cellIndexB[adhesionQueueIdx] = cellCount + queueIdx;
            breakForce[adhesionQueueIdx] = 10.0;
            restLength[adhesionQueueIdx] = 2.0;
            linearSpringStiffness[adhesionQueueIdx] = 5.0;
            linearSpringDamping[adhesionQueueIdx] = 0.5;
            orientationSpringStrength[adhesionQueueIdx] = 2.0;
            maxAngularDeviation[adhesionQueueIdx] = 0.785; // 45 degrees in radians
            isActive[adhesionQueueIdx] = 1;
            
            // Adhesion between childA and childB (sibling connection)
            cellIndexA[adhesionQueueIdx + 1] = index;
            cellIndexB[adhesionQueueIdx + 1] = cellCount + queueIdx;
            breakForce[adhesionQueueIdx + 1] = 8.0;
            restLength[adhesionQueueIdx + 1] = 2.0;
            linearSpringStiffness[adhesionQueueIdx + 1] = 3.0;
            linearSpringDamping[adhesionQueueIdx + 1] = 0.3;
            orientationSpringStrength[adhesionQueueIdx + 1] = 1.0;
            maxAngularDeviation[adhesionQueueIdx + 1] = 0.785;
            isActive[adhesionQueueIdx + 1] = 1;
        } else {
            // Cell limit reached, don't split
            atomicAdd(pendingCellCount, -1);
            cell.justSplit = 0;
            cells[index] = cell;
        }
    } else {
        cell.justSplit = 0;
        cells[index] = cell;
    }
}
