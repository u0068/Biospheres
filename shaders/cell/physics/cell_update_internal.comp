#version 430 core

layout(local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

struct AdhesionSettings
{
    bool canBreak;
    float breakForce;
    float restLength;
    float linearSpringStiffness;
    float linearSpringDamping;
    float orientationSpringStiffness;
    float orientationSpringDamping;
    float maxAngularDeviation; // degrees
};

// GPU Mode structure
struct GPUMode {
    vec4 color;           // R, G, B, padding
    vec4 orientationA;    // quaternion
    vec4 orientationB;    // quaternion
    vec4 splitDirection;  // x, y, z, padding
    ivec2 childModes;     // mode indices for children
    float splitInterval;
    int genomeOffset;
    AdhesionSettings adhesionSettings;
    int parentMakeAdhesion; // Boolean flag for adhesion creation
    int childAKeepAdhesion; // Boolean flag for child A to keep adhesion
    int childBKeepAdhesion; // Boolean flag for child B to keep adhesion
    int padding[1];         // Padding to maintain alignment
};

// Cell data structure for compute shader
struct ComputeCell {
    // Physics:
    vec4 positionAndMass; // x, y, z, mass
    vec4 velocity;        // Fixed to match CPU layout
    vec4 acceleration;    // Fixed to match CPU layout
    vec4 orientation;     // angular stuff in quaternion to prevent gimbal lock
    vec4 angularVelocity;
    vec4 angularAcceleration;
    // Internal:
    vec4 signallingSubstances; // 4 substances for now
    int modeIndex;  // absolute index of the cell's mode
    float age; // also used for split timer
    float toxins;
    float nitrates;
    int adhesionIndices[20];
};

// Adhesion connection structure - stores permanent connections between sibling cells
struct AdhesionConnection {
    uint cellAIndex;      // Index of first cell in the connection
    uint cellBIndex;      // Index of second cell in the connection
    uint modeIndex;       // Mode index for the connection ( to lookup adhesion settings )
    uint isActive;        // Whether this connection is still active (1 = active, 0 = inactive)
};

layout(std430, binding = 0) restrict buffer modeBuffer {
    GPUMode modes[];
};

layout(std430, binding = 1) restrict buffer ReadCellBuffer {
    ComputeCell inputCells[];
};

layout(std430, binding = 2) restrict buffer WriteCellBuffer {
    ComputeCell outputCells[];
};

layout(std430, binding = 3) coherent buffer CellCountBuffer {
    uint totalCellCount;
    uint liveCellCount;
    uint totalAdhesionCount;
    uint liveAdhesionCount;
};

layout(std430, binding = 4) buffer AdhesionConnectionBuffer {
    AdhesionConnection connections[];
};

layout(std430, binding = 5) coherent buffer freeCellSlotBuffer {
    uint freeCellSlotIndices[];
};

layout(std430, binding = 6) coherent buffer freeAdhesionSlotBuffer {
    uint freeAdhesionSlotIndices[];
};

uniform float u_deltaTime;
uniform int u_maxCells;
uniform int u_maxAdhesions;
//uniform uint u_frameNumber;
int u_frameNumber = 1; // Placeholder for frame number, can be set externally

vec4 quatMultiply(vec4 q1, vec4 q2) {
    return vec4(
        q1.w*q2.x + q1.x*q2.w + q1.y*q2.z - q1.z*q2.y,
        q1.w*q2.y - q1.x*q2.z + q1.y*q2.w + q1.z*q2.x,
        q1.w*q2.z + q1.x*q2.y - q1.y*q2.x + q1.z*q2.w,
        q1.w*q2.w - q1.x*q2.x - q1.y*q2.y - q1.z*q2.z
    );
}

vec3 rotateVectorByQuaternion(vec3 v, vec4 q) {
    // v' = q * v * q^-1
    // Optimized version using cross product:
    vec3 u = q.xyz;
    float s = q.w;

    return 2.0 * dot(u, v) * u
         + (s * s - dot(u, u)) * v
         + 2.0 * s * cross(u, v);
}

// Hash function to generate a pseudo-random float in [0,1] from a uint seed
float hash11(uint n) {
    n = (n ^ 61u) ^ (n >> 16u);
    n *= 9u;
    n = n ^ (n >> 4u);
    n *= 0x27d4eb2du;
    n = n ^ (n >> 15u);
    return float(n & 0x00FFFFFFu) / float(0x01000000u);
}

// Create a small random quaternion for a tiny rotation (angle in radians)
vec4 smallRandomQuat(float angle, uint seed) {
    // Random axis
    float rand1 = hash11(seed * 3u + 0u);
    float rand2 = hash11(seed * 3u + 1u);
    float rand3 = hash11(seed * 3u + 2u);
    vec3 axis = normalize(vec3(rand1, rand2, rand3) * 2.0 - 1.0);
    float halfAngle = angle * 0.5;
    float s = sin(halfAngle);
    return normalize(vec4(axis * s, cos(halfAngle)));
}

uint getNewAdhesionIndex() {
    uint reservation = atomicAdd(liveAdhesionCount, 1);
    uint adhesionIndex = -1; // Default invalid index
    if (reservation < totalAdhesionCount) {
        // Reuse a slot from the free stack
        uint topIndex = totalAdhesionCount - reservation;
        adhesionIndex = freeAdhesionSlotIndices[topIndex];
    } else {
        // Allocate a new slot
        adhesionIndex = atomicAdd(totalAdhesionCount, 1);
        if (adhesionIndex >= u_maxAdhesions) {
            // No space for new adhesions, cancel the split and clamp counts
            atomicMin(liveAdhesionCount, u_maxAdhesions);
            atomicMin(totalAdhesionCount, u_maxAdhesions);
            return -1; // Indicate failure to allocate
        }
    }
    return adhesionIndex;
}

void main() {
    uint index = gl_GlobalInvocationID.x;
    if (index >= totalCellCount) return;

    ComputeCell cell = inputCells[index];
    GPUMode mode = modes[cell.modeIndex];

    if (cell.age < mode.splitInterval) {
        outputCells[index] = cell;
        return;
    }

    // Begin split logic

    // === Compute Split Priority ===
    float myPriority = hash11(index ^ u_frameNumber);

    // === Check Adhered Cells ===
    for (int i = 0; i < 20; ++i) {
        int adhesionIdx = cell.adhesionIndices[i];
        if (adhesionIdx < 0) continue;

        AdhesionConnection conn = connections[adhesionIdx];
        if (conn.isActive == 0) continue;

        uint otherIdx = (conn.cellAIndex == index) ? conn.cellBIndex : conn.cellAIndex;
        ComputeCell other = inputCells[otherIdx];
        GPUMode otherMode = modes[other.modeIndex];

        if (other.age < otherMode.splitInterval) continue; // Other cell not splitting

        // If other cell wants to split, compare priority
        float otherPriority = hash11(otherIdx ^ u_frameNumber);
        if (otherPriority > myPriority) {
            // Defer this split
            outputCells[index] = cell;
            return;
        }
    }
    
    // When dead cells are implemented, update this to reuse slots
    uint newIndex = atomicAdd(totalCellCount, 1);
    atomicAdd(liveCellCount, 1);
    if (newIndex >= u_maxCells) {
        atomicMin(totalCellCount, u_maxCells); // Clamp cell count
        atomicMin(liveCellCount, u_maxCells); // Clamp cell count
        // No space for new cells, cancel the split
        outputCells[index] = cell;
        return;
    }

    uint childAIndex = index;
    uint childBIndex = newIndex;

    vec3 offset = rotateVectorByQuaternion(mode.splitDirection.xyz, cell.orientation) * 0.5;

    // Both child cells should start with the same age after the split
    // Since we already aged the parent cell by deltaTime this frame,
    // we need to subtract the excess age beyond the split interval
    float startAge = cell.age - mode.splitInterval;


    // Apply rotation deltas to parent orientation
    vec4 q_parent = cell.orientation;
    vec4 q_childA = normalize(quatMultiply(q_parent, mode.orientationA));
    vec4 q_childB = normalize(quatMultiply(q_parent, mode.orientationB));

    // Add a tiny random variance to each child orientation (0.001 degree = 0.001 * PI / 180 radians)
    float tinyAngle = 0.001 * 0.017453292519943295; // radians

    // Use cell index and newIndex to generate different seeds for each child
    vec4 q_varA = smallRandomQuat(tinyAngle, childAIndex);
    vec4 q_varB = smallRandomQuat(tinyAngle, childBIndex);
    q_childA = normalize(quatMultiply(q_childA, q_varA));
    q_childB = normalize(quatMultiply(q_childB, q_varB));

    ComputeCell childA = cell;
    childA.positionAndMass.xyz += offset;
    childA.age = startAge;
    childA.modeIndex = mode.childModes.x;
    childA.orientation = q_childA;
    for (int i = 0; i < 20; ++i) {
        childA.adhesionIndices[i] = -1; // Reset adhesion indices for the new child
    }

    ComputeCell childB = cell;
    childB.positionAndMass.xyz -= offset;
    childB.age = startAge;
    childB.modeIndex = mode.childModes.y;
    childB.orientation = q_childB;
    for (int i = 0; i < 20; ++i) {
        childA.adhesionIndices[i] = -1; // Reset adhesion indices for the new child
    }

    // Inherit adhesions for the new child cells
    for (int i = 0; i < 20; ++i) {
        int oldAdhesionIndex = cell.adhesionIndices[i];
        if (oldAdhesionIndex < 0) continue;

        AdhesionConnection oldConnection = connections[oldAdhesionIndex];
        if (oldConnection.isActive == 0) continue;

        // Determine who the parent was connected to
        uint neighborIndex = (oldConnection.cellAIndex == childAIndex)
            ? oldConnection.cellBIndex
            : oldConnection.cellAIndex;

        // Remove the old connection
        oldConnection.isActive = 0;
        connections[oldAdhesionIndex] = oldConnection; // Mark as inactive
        // Update free adhesion slot buffer
        uint reservation = atomicAdd(liveAdhesionCount, -1);
        // Allocate the slot at the top of the free stack
        uint topIndex = totalAdhesionCount - reservation;
        freeAdhesionSlotIndices[topIndex] = oldAdhesionIndex;

        // Child A keeps adhesion
        if (mode.childAKeepAdhesion == 1) {
            uint newIdx = getNewAdhesionIndex();
            if (newIdx != uint(-1)) {
                connections[newIdx] = AdhesionConnection(
                    childAIndex,
                    neighborIndex,
                    oldConnection.modeIndex,
                    1
                );
                // Add to childA's adhesionIndices
                for (int j = 0; j < 20; ++j) {
                    if (childA.adhesionIndices[j] < 0) {
                        childA.adhesionIndices[j] = int(newIdx);
                        break;
                    }
                }
            }
        }

        // Child B keeps adhesion
        if (mode.childBKeepAdhesion == 1) {
            uint newIdx = getNewAdhesionIndex();
            if (newIdx != uint(-1)) {
                connections[newIdx] = AdhesionConnection(
                    childBIndex, // this is the queue-allocated child
                    neighborIndex,
                    oldConnection.modeIndex,
                    1
                );
                // Add to childB's adhesionIndices
                for (int j = 0; j < 20; ++j) {
                    if (childB.adhesionIndices[j] < 0) {
                        childB.adhesionIndices[j] = int(newIdx);
                        break;
                    }
                }
            }
        }
    }

    // Store new cells
    outputCells[childAIndex] = childA;
    outputCells[childBIndex] = childB;
    
    // Now we need to add the adhesion connection between the children
    if (mode.parentMakeAdhesion == 0) {
        return;
    }

    uint adhesionIndex = getNewAdhesionIndex();
    if (adhesionIndex == -1) {
        // Failed to reserve an adhesion index, don't create adhesion
        // In the future, make this prevent the split instead
        return;
    }

    AdhesionConnection newAdhesion;
    newAdhesion.cellAIndex = childAIndex; // Child A index
    newAdhesion.cellBIndex = childBIndex; // Child B index index
    newAdhesion.modeIndex = cell.modeIndex; // Use parent mode for adhesion settings
    newAdhesion.isActive = 1; // Active connection

    connections[adhesionIndex] = newAdhesion;

    for (int j = 0; j < 20; ++j) {
        if (childA.adhesionIndices[j] < 0) {
            childA.adhesionIndices[j] = int(adhesionIndex);
            break;
        }
    }
    for (int j = 0; j < 20; ++j) {
        if (childB.adhesionIndices[j] < 0) {
            childB.adhesionIndices[j] = int(adhesionIndex);
            break;
        }
    }

    // Store new cells
    outputCells[childAIndex] = childA;
    outputCells[childBIndex] = childB;

}


