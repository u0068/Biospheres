#version 430 core
#extension GL_ARB_gpu_shader_int64 : enable

layout(local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

struct GPUMode {
    vec4 color;             // r, g, b, padding
    vec4 orientationA;      // quaternion
    vec4 orientationB;      // quaternion
    vec4 splitDirection;  // x, y, z, padding
    ivec2 childModes;
    float splitInterval;
    int genomeOffset;
};

struct ComputeCell {
    vec4 positionAndMass;
    vec4 velocity;        // Fixed to match CPU layout
    vec4 acceleration;    // Fixed to match CPU layout
    vec4 orientation;
    vec4 angularVelocity;
    vec4 angularAcceleration;
    vec4 signallingSubstances;
    int modeIndex;
    float age;
    float toxins;
    float nitrates;
    // Unique ID system
    uint64_t uniqueID;     // Packed ID: [parent(32)] [cell(31)] [child(1)]
    uint64_t justSplit;    // Use this as the justSplit flag
    uint padding2[4];    // Additional padding to ensure 16-byte alignment
};

layout(std430, binding = 0) restrict buffer modeBuffer {
    GPUMode modes[];
};

layout(std430, binding = 1) restrict buffer CellBuffer {
    ComputeCell cells[];
};

layout(std430, binding = 2) buffer CellAdditionQueue {
    ComputeCell newCells[];
};

layout(std430, binding = 3) buffer CellCountBuffer {
    uint cellCount;
    uint pendingCellCount;
};

layout(std430, binding = 4) buffer IDCounterBuffer {
    uint nextAvailableID;    // Next ID to assign
    uint recycledIDCount;    // Number of recycled IDs available
    uint maxCellID;          // Maximum cell ID (2147483647)
};

layout(std430, binding = 5) buffer IDPoolBuffer {
    uint availableIDs[];     // Pool of available/recycled cell IDs
};

uniform float u_deltaTime;
uniform int u_maxCells;

vec4 quatMultiply(vec4 q1, vec4 q2) {
    return vec4(
        q1.w*q2.x + q1.x*q2.w + q1.y*q2.z - q1.z*q2.y,
        q1.w*q2.y - q1.x*q2.z + q1.y*q2.w + q1.z*q2.x,
        q1.w*q2.z + q1.x*q2.y - q1.y*q2.x + q1.z*q2.w,
        q1.w*q2.w - q1.x*q2.x - q1.y*q2.y - q1.z*q2.z
    );
}

vec3 rotateVectorByQuaternion(vec3 v, vec4 q) {
    // v' = q * v * q^-1
    // Optimized version using cross product:
    vec3 u = q.xyz;
    float s = q.w;

    return 2.0 * dot(u, v) * u
         + (s * s - dot(u, u)) * v
         + 2.0 * s * cross(u, v);
}

// ID utility functions
uint getParentID(uint64_t uniqueID) {
    return uint((uniqueID >> 32) & 0xFFFFFFFFu);
}

uint getCellID(uint64_t uniqueID) {
    return uint((uniqueID >> 1) & 0x7FFFFFFFu);
}

uint getChildFlag(uint64_t uniqueID) {
    return uint(uniqueID & 0x1u);
}

uint64_t packUniqueID(uint parentID, uint cellID, uint childFlag) {
    return uint64_t(parentID) << 32 | (uint64_t(cellID & 0x7FFFFFFFu) << 1) | uint64_t(childFlag & 0x1u);
}

// Allocate a new cell ID from the pool or generate new one
uint allocateCellID() {
    uint newCellID;
    uint nextID = nextAvailableID;

    if (nextID <= maxCellID) {
        // Use new IDs until we reach the max
        newCellID = atomicAdd(nextAvailableID, 1);
    } else {
        // Only after all IDs are used, start recycling
        if (recycledIDCount > 0) {
            uint recycleIndex = atomicAdd(recycledIDCount, -1) - 1;
            if (recycleIndex < recycledIDCount + 1) { // Check bounds
                newCellID = availableIDs[recycleIndex];
            } else {
                // Fallback: out of IDs, handle error (e.g., return 0 or 0xFFFFFFFFu)
                newCellID = 0xFFFFFFFFu;
            }
        } else {
            // Fallback: out of IDs, handle error
            newCellID = 0xFFFFFFFFu;
        }
    }
    return newCellID;
}

void main() {
    uint index = gl_GlobalInvocationID.x;
    if (index >= cellCount) {
        return;
    }
    ComputeCell cell = cells[index]; // Read from current buffer
    GPUMode mode = modes[cell.modeIndex];

    cell.age += u_deltaTime;
    if (cell.age >= mode.splitInterval) {
        // Atomically check limit and reserve space in a single operation
        uint queueIdx = atomicAdd(pendingCellCount, 1);
        if (cellCount + queueIdx < u_maxCells) {
            vec3 offset = rotateVectorByQuaternion(mode.splitDirection.xyz, cell.orientation) * 0.5;

            float startAge = cell.age - mode.splitInterval;

            vec4 q_parent = cell.orientation;
            vec4 q_childA = normalize(quatMultiply(q_parent, mode.orientationA));
            vec4 q_childB = normalize(quatMultiply(q_parent, mode.orientationB));

            uint childACellID = allocateCellID();
            uint childBCellID = allocateCellID();
            uint parentCellID = getCellID(cell.uniqueID);

            ComputeCell childA = cell;
            childA.positionAndMass.xyz += offset;
            childA.age = startAge;
            childA.modeIndex = mode.childModes.x;
            childA.orientation = q_childA;
            childA.uniqueID = packUniqueID(parentCellID, childACellID, 0u);
            childA.justSplit = 1;

            ComputeCell childB = cell;
            childB.positionAndMass.xyz -= offset;
            childB.age = startAge;
            childB.modeIndex = mode.childModes.y;
            childB.orientation = q_childB;
            childB.uniqueID = packUniqueID(parentCellID, childBCellID, 1u);
            childB.justSplit = 1;

            cells[index] = childA;
            newCells[queueIdx] = childB;
        } else {
            atomicAdd(pendingCellCount, -1);
            cell.justSplit = 0;
            cells[index] = cell;
        }
    } else {
        cell.justSplit = 0;
        cells[index] = cell;
    }
}
