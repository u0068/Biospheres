#version 430 core

layout(local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

struct AdhesionSettings
{
    bool canBreak;
    float breakForce;
    float restLength;
    float linearSpringStiffness;
    float linearSpringDamping;
    float orientationSpringStiffness;
    float orientationSpringDamping;
    float maxAngularDeviation; // degrees - 0 = strict orientation locking, >0 = flexible with max deviation
};

// GPU Mode structure
struct GPUMode {
    vec4 color;           // R, G, B, padding
    vec4 orientationA;    // quaternion
    vec4 orientationB;    // quaternion
    vec4 splitDirection;  // x, y, z, padding
    ivec2 childModes;     // mode indices for children
    float splitInterval;
    int genomeOffset;
    AdhesionSettings adhesionSettings;
    int parentMakeAdhesion; // Boolean flag for adhesion creation
    int childAKeepAdhesion; // Boolean flag for child A to keep adhesion
    int childBKeepAdhesion; // Boolean flag for child B to keep adhesion
    int maxAdhesions;       // Max number of adhesions
};

// Cell data structure for compute shader
struct ComputeCell {
    // Physics:
    vec4 positionAndMass; // x, y, z, mass
    vec4 velocity;        // Fixed to match CPU layout
    vec4 acceleration;    // Fixed to match CPU layout
    vec4 orientation;     // angular stuff in quaternion to prevent gimbal lock
    vec4 angularVelocity;
    vec4 angularAcceleration;
    // Internal:
    vec4 signallingSubstances; // 4 substances for now
    int modeIndex;  // absolute index of the cell's mode
    float age; // also used for split timer
    float toxins;
    float nitrates;
    int adhesionIndices[20];
};

// Adhesion connection structure - stores permanent connections between sibling cells
struct AdhesionConnection {
    uint cellAIndex;      // Index of first cell in the connection
    uint cellBIndex;      // Index of second cell in the connection
    uint modeIndex;       // Mode index for the connection ( to lookup adhesion settings )
    uint isActive;        // Whether this connection is still active (1 = active, 0 = inactive)
};

layout(std430, binding = 0) restrict buffer modeBuffer {
    GPUMode modes[];
};

layout(std430, binding = 1) restrict buffer ReadCellBuffer {
    ComputeCell inputCells[];
};

layout(std430, binding = 2) restrict buffer WriteCellBuffer {
    ComputeCell outputCells[];
};

layout(std430, binding = 3) coherent buffer CellCountBuffer {
    uint totalCellCount;
    uint liveCellCount;
    uint totalAdhesionCount;
    int freeAdhesionTop;
};

layout(std430, binding = 4) coherent buffer AdhesionConnectionBuffer {
    AdhesionConnection connections[];
};

layout(std430, binding = 5) coherent buffer freeCellSlotBuffer {
    uint freeCellSlotIndices[];
};

layout(std430, binding = 6) coherent buffer freeAdhesionSlotBuffer {
    uint freeAdhesionSlotIndices[];
};

uniform float u_deltaTime;
uniform int u_maxCells;
uniform int u_maxAdhesions;
//uniform uint u_frameNumber;
int u_frameNumber = 1; // Placeholder for frame number

vec4 quatMultiply(vec4 q1, vec4 q2) {
    return vec4(
        q1.w*q2.x + q1.x*q2.w + q1.y*q2.z - q1.z*q2.y,
        q1.w*q2.y - q1.x*q2.z + q1.y*q2.w + q1.z*q2.x,
        q1.w*q2.z + q1.x*q2.y - q1.y*q2.x + q1.z*q2.w,
        q1.w*q2.w - q1.x*q2.x - q1.y*q2.y - q1.z*q2.z
    );
}

vec3 rotateVectorByQuaternion(vec3 v, vec4 q) {
    // v' = q * v * q^-1
    // Optimized version using cross product:
    vec3 u = q.xyz;
    float s = q.w;

    return 2.0 * dot(u, v) * u
         + (s * s - dot(u, u)) * v
         + 2.0 * s * cross(u, v);
}

// Hash function to generate a pseudo-random float in [0,1] from a uint seed
float hash11(uint n) {
    n = (n ^ 61u) ^ (n >> 16u);
    n *= 9u;
    n = n ^ (n >> 4u);
    n *= 0x27d4eb2du;
    n = n ^ (n >> 15u);
    return float(n & 0x00FFFFFFu) / float(0x01000000u);
}

// Create a small random quaternion for a tiny rotation (angle in radians)
vec4 smallRandomQuat(float angle, uint seed) {
    // Random axis
    float rand1 = hash11(seed * 3u + 0u);
    float rand2 = hash11(seed * 3u + 1u);
    float rand3 = hash11(seed * 3u + 2u);
    vec3 axis = normalize(vec3(rand1, rand2, rand3) * 2.0 - 1.0);
    float halfAngle = angle * 0.5;
    float s = sin(halfAngle);
    return normalize(vec4(axis * s, cos(halfAngle)));
}

uint getNewAdhesionIndex() {
    // Try to reserve a free adhesion slot
    // Snapshot free top value without modifying it first
    int freeTopBefore = freeAdhesionTop;
    if (freeTopBefore > 0) {
        // Now reserve slot *safely*
        int freeTop = atomicAdd(freeAdhesionTop, -1);
        if (freeTop > 0) {
            return freeAdhesionSlotIndices[freeTop - 1];
        } else {
            // Another thread raced and depleted the stack before we got here
            atomicAdd(freeAdhesionTop, 1); // revert
        }
    }

    // Fallback to allocating a new slot
    uint newAdhesionIndex = atomicAdd(totalAdhesionCount, 1);
    if (newAdhesionIndex >= u_maxAdhesions) {
        atomicMin(totalAdhesionCount, u_maxAdhesions);
        return -1;
    }
    return newAdhesionIndex;
}

bool addAdhesion(uint cellAIndex, uint cellBIndex, uint modeIndex) {
    uint newAdhesionIndex = getNewAdhesionIndex();
    if (newAdhesionIndex == uint(-1)) {
        // Failed to reserve an adhesion index
        return false;
    }

    // Check for available slot in cell A
    int slotA = -1;
    for (int j = 0; j < 20; ++j) {
        if (outputCells[cellAIndex].adhesionIndices[j] < 0) {
            slotA = j;
            break;
        }
    }

    // Check for available slot in cell B
    int slotB = -1;
    for (int j = 0; j < 20; ++j) {
        if (outputCells[cellBIndex].adhesionIndices[j] < 0) {
            slotB = j;
            break;
        }
    }

    if (slotA == -1 || slotB == -1) {
        // Roll back the reservation if any cell has no free slot
        int reservation = atomicAdd(freeAdhesionTop, 1);
        int topIndex = reservation;
        freeAdhesionSlotIndices[topIndex] = newAdhesionIndex;
        return false;
    }

    // Write connection and assign indices
    connections[newAdhesionIndex] = AdhesionConnection(
        cellAIndex,
        cellBIndex,
        modeIndex,
        1
    );
    outputCells[cellAIndex].adhesionIndices[slotA] = int(newAdhesionIndex);
    outputCells[cellBIndex].adhesionIndices[slotB] = int(newAdhesionIndex);
    return true;
}

void removeAdhesion(int adhesionIndex){
    // Mark as inactive
    
    // Remove from cellA
    connections[adhesionIndex].isActive = 0;
    for (int i = 0; i < 20; ++i) {
        if (outputCells[connections[adhesionIndex].cellAIndex].adhesionIndices[i] == adhesionIndex) {
            outputCells[connections[adhesionIndex].cellAIndex].adhesionIndices[i] = -1;
            break;
        }
    }

    // Remove from cellB
    for (int i = 0; i < 20; ++i) {
        if (outputCells[connections[adhesionIndex].cellBIndex].adhesionIndices[i] == adhesionIndex) {
            outputCells[connections[adhesionIndex].cellBIndex].adhesionIndices[i] = -1;
            break;
        }
    }

    // Push to free stack safely
    int freeIndex = atomicAdd(freeAdhesionTop, 1);
    if (freeIndex < u_maxAdhesions) {
        freeAdhesionSlotIndices[freeIndex] = adhesionIndex;
    } else {
        freeAdhesionTop = u_maxAdhesions;
    }
}

float priority(uint seed) {
    // Generate a pseudo-random priority based on the seed
    return hash11(seed ^ u_frameNumber);
}

void main() {
    uint index = gl_GlobalInvocationID.x;
    if (index >= totalCellCount) return;

    ComputeCell cell = inputCells[index];
    GPUMode mode = modes[cell.modeIndex];

    outputCells[index] = cell; // Default output is the same cell

    if (cell.age < mode.splitInterval) return;

    int adhesionCount = 0;
    for (int i = 0; i < 20; ++i) {
        if (cell.adhesionIndices[i] >= 0) {
            adhesionCount++;
        }
    }
    if (adhesionCount >= mode.maxAdhesions) return; // Too many adhesions, cannot split

    // Begin split logic

    // === Compute Split Priority ===
    float myPriority = priority(index);

    // === Check Adhered Cells ===
    for (int i = 0; i < 20; ++i) {
        int adhesionIdx = cell.adhesionIndices[i];
        if (adhesionIdx < 0) continue;

        AdhesionConnection conn = connections[adhesionIdx];
        if (conn.isActive == 0) continue;

        uint otherIndex = (conn.cellAIndex == index) ? conn.cellBIndex : conn.cellAIndex;
        ComputeCell other = inputCells[otherIndex];
        GPUMode otherMode = modes[other.modeIndex];

        if (other.age < otherMode.splitInterval) continue; // Other cell not splitting

        // If other cell wants to split, compare priority
        float otherPriority = priority(otherIndex);
        if (otherPriority < myPriority) {
            // Defer this split - other cell has higher priority (lower index)
            return;
        }
    }
    
    // CRITICAL FIX: Replace atomic splitting with safer reservation system
    // First, check if we have space for a new cell
    uint currentCount = totalCellCount;
    if (currentCount >= u_maxCells) {
        // No space available, cancel the split
        outputCells[index] = cell;
        return;
    }
    
    // Try to reserve a slot atomically
    uint newIndex = atomicAdd(totalCellCount, 1);
    
    // Check if we successfully got a valid slot
    if (newIndex >= u_maxCells) {
        // We exceeded the limit, rollback and cancel
        atomicAdd(totalCellCount, -1);
        outputCells[index] = cell;
        return;
    }
    
    // Successfully reserved a slot, increment live count
    atomicAdd(liveCellCount, 1);
    
    // CRITICAL FIX: Add memory barrier to ensure atomic operations are complete
    memoryBarrierBuffer();
    
    // CRITICAL FIX: Double-check bounds after memory barrier
    if (newIndex >= u_maxCells) {
        // Rollback the increment if we're still out of bounds
        atomicAdd(totalCellCount, -1);
        atomicAdd(liveCellCount, -1);
        outputCells[index] = cell;
        return;
    }

    uint childAIndex = index;
    uint childBIndex = newIndex;

    vec3 offset = rotateVectorByQuaternion(mode.splitDirection.xyz, cell.orientation) * 0.5;

    // Both child cells should start with the same age after the split
    // Since we already aged the parent cell by deltaTime this frame,
    // we need to subtract the excess age beyond the split interval
    float startAge = cell.age - mode.splitInterval;

    // Apply rotation deltas to parent orientation
    vec4 q_parent = cell.orientation;
    vec4 q_childA = normalize(quatMultiply(q_parent, mode.orientationA));
    vec4 q_childB = normalize(quatMultiply(q_parent, mode.orientationB));

    // Add a tiny random variance to each child orientation (0.001 degree = 0.001 * PI / 180 radians)
    float tinyAngle = 0.001 * 0.017453292519943295; // radians

    // Use child indices to generate different seeds for each child
    vec4 q_varA = smallRandomQuat(tinyAngle, childAIndex);
    vec4 q_varB = smallRandomQuat(tinyAngle, childBIndex);
    q_childA = normalize(quatMultiply(q_childA, q_varA));
    q_childB = normalize(quatMultiply(q_childB, q_varB));

    ComputeCell childA = cell;
    childA.positionAndMass.xyz += offset;
    childA.age = startAge;
    childA.modeIndex = mode.childModes.x;
    childA.orientation = q_childA;
    for (int i = 0; i < 20; ++i) {
        childA.adhesionIndices[i] = -1; // Reset adhesion indices for the new child
    }

    ComputeCell childB = cell;
    childB.positionAndMass.xyz -= offset;
    childB.age = startAge + 0.001;
    childB.modeIndex = mode.childModes.y;
    childB.orientation = q_childB;
    for (int i = 0; i < 20; ++i) {
        childB.adhesionIndices[i] = -1; // Reset adhesion indices for the new child
    }
    
    // Store new cells
    outputCells[childAIndex] = childA;
    outputCells[childBIndex] = childB;
    
    // CRITICAL FIX: Also write to input buffer to maintain consistency across all buffers
    inputCells[childAIndex] = childA;
    inputCells[childBIndex] = childB;

    // Inherit adhesions for the new child cells
    for (int i = 0; i < 20; ++i) {
        int oldAdhesionIndex = cell.adhesionIndices[i];
        if (oldAdhesionIndex < 0) continue;

        AdhesionConnection oldConnection = connections[oldAdhesionIndex];
        if (oldConnection.isActive == 0) continue;

        // CRITICAL FIX: Add memory barrier before modifying adhesion connections
        memoryBarrierBuffer();

        // Determine who the parent was connected to
        uint neighborIndex = (oldConnection.cellAIndex == childAIndex)
            ? oldConnection.cellBIndex
            : oldConnection.cellAIndex;

        // Remove the old connection
        removeAdhesion(oldAdhesionIndex);

        vec3 direction = normalize(inputCells[neighborIndex].positionAndMass.xyz - cell.positionAndMass.xyz);
        vec3 splitDirWorld = rotateVectorByQuaternion(mode.splitDirection.xyz, cell.orientation);
        float adhesionZone = dot(direction, splitDirWorld);
        float equatorWidth = 0.05; // Width of the shared adhesion zone

        // Child A keeps adhesion
        if (mode.childAKeepAdhesion == 1 && adhesionZone > -equatorWidth) {
            if (!addAdhesion(childAIndex, neighborIndex, oldConnection.modeIndex)) return;
        }

        // Child B keeps adhesion
        if (mode.childBKeepAdhesion == 1 && adhesionZone < equatorWidth) {
            if (!addAdhesion(childBIndex, neighborIndex, oldConnection.modeIndex)) return;
        }
    }
    
    // Now we need to add the adhesion connection between the children
    if (mode.parentMakeAdhesion == 0)  return;
    
    // Create a new adhesion connection between the two children
    if (!addAdhesion(childAIndex, childBIndex, cell.modeIndex)) return;
}


