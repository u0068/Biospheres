#version 430 core

layout(local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

struct AdhesionSettings
{
    bool canBreak;
    float breakForce;
    float restLength;
    float linearSpringStiffness;
    float linearSpringDamping;
    float orientationSpringStiffness;
    float orientationSpringDamping;
    float maxAngularDeviation; // degrees
};

// GPU Mode structure
struct GPUMode {
    vec4 color;           // R, G, B, padding
    vec4 orientationA;    // quaternion
    vec4 orientationB;    // quaternion
    vec4 splitDirection;  // x, y, z, padding
    ivec2 childModes;     // mode indices for children
    float splitInterval;
    int genomeOffset;
    AdhesionSettings adhesionSettings;
    int parentMakeAdhesion; // Boolean flag for adhesion creation
    int padding[3];          // Padding to maintain alignment
};

struct ComputeCell {
    vec4 positionAndMass;
    vec4 velocity;
    vec4 acceleration;
    vec4 orientation;
    vec4 angularVelocity;
    vec4 angularAcceleration;

    vec4 signallingSubstances;
    int modeIndex;
    float age;
    float toxins;
    float nitrates;
};

// Adhesion connection structure - stores permanent connections between sibling cells
struct AdhesionConnection {
    uint cellAIndex;      // Index of first cell in the connection
    uint cellBIndex;      // Index of second cell in the connection
    uint modeIndex;       // Mode index for the connection ( to lookup adhesion settings )
    uint isActive;        // Whether this connection is still active (1 = active, 0 = inactive)
};

layout(std430, binding = 0) restrict buffer modeBuffer {
    GPUMode modes[];
};

layout(std430, binding = 1) restrict buffer ReadCellBuffer {
    ComputeCell inputCells[];
};

layout(std430, binding = 2) restrict buffer WriteCellBuffer {
    ComputeCell outputCells[];
};

layout(std430, binding = 3) buffer CellAdditionQueue {
    ComputeCell newCells[];
};

layout(std430, binding = 4) coherent buffer CellCountBuffer {
    uint cellCount;
    uint pendingCellCount;
    uint adhesionCount;
};

layout(std430, binding = 5) buffer AdhesionConnectionBuffer {
    AdhesionConnection connections[];
};

uniform float u_deltaTime;
uniform int u_maxCells;
uniform int u_maxAdhesions;

vec4 quatMultiply(vec4 q1, vec4 q2) {
    return vec4(
        q1.w*q2.x + q1.x*q2.w + q1.y*q2.z - q1.z*q2.y,
        q1.w*q2.y - q1.x*q2.z + q1.y*q2.w + q1.z*q2.x,
        q1.w*q2.z + q1.x*q2.y - q1.y*q2.x + q1.z*q2.w,
        q1.w*q2.w - q1.x*q2.x - q1.y*q2.y - q1.z*q2.z
    );
}

vec3 rotateVectorByQuaternion(vec3 v, vec4 q) {
    // v' = q * v * q^-1
    // Optimized version using cross product:
    vec3 u = q.xyz;
    float s = q.w;

    return 2.0 * dot(u, v) * u
         + (s * s - dot(u, u)) * v
         + 2.0 * s * cross(u, v);
}

void main() {
    uint index = gl_GlobalInvocationID.x;
    if (index >= cellCount) {
        return;
    }
    ComputeCell cell = inputCells[index]; // Read from current buffer
    GPUMode mode = modes[cell.modeIndex];

    cell.age += u_deltaTime;
    if (cell.age < mode.splitInterval) {
        // Not ready to split yet, just update the cell
        outputCells[index] = cell;
        return;
    }
    
    uint newIndex = atomicAdd(cellCount, 1);
    if (newIndex >= u_maxCells) {
        atomicMin(cellCount, u_maxCells); // Clamp cell count
        // No space for new cells, cancel the split
        outputCells[index] = cell;
        return;
    }

    vec3 offset = rotateVectorByQuaternion(mode.splitDirection.xyz, cell.orientation) * 0.5;

    // Both child cells should start with the same age after the split
    // Since we already aged the parent cell by deltaTime this frame,
    // we need to subtract the excess age beyond the split interval
    float startAge = cell.age - mode.splitInterval;

    // Apply rotation deltas to parent orientation
    vec4 q_parent = cell.orientation;
    vec4 q_childA = normalize(quatMultiply(q_parent, mode.orientationA));
    vec4 q_childB = normalize(quatMultiply(q_parent, mode.orientationB));

    ComputeCell childA = cell;
    childA.positionAndMass.xyz += offset;
    childA.age = startAge;
    childA.modeIndex = mode.childModes.x;
    childA.orientation = q_childA;

    ComputeCell childB = cell;
    childB.positionAndMass.xyz -= offset;
    childB.age = startAge;
    childB.modeIndex = mode.childModes.y;
    childB.orientation = q_childB;

    // Store new cells
    outputCells[index] = childA;
    outputCells[newIndex] = childB;

    // Now we need to add the adhesion connection
    if (mode.parentMakeAdhesion == 0) {
        return;
    }
    AdhesionConnection newAdhesion;
    newAdhesion.cellAIndex = index; // Parent cell index
    newAdhesion.cellBIndex = newIndex; // New child cell index
    newAdhesion.modeIndex = cell.modeIndex; // Use parent mode for adhesion settings
    newAdhesion.isActive = 1; // Active connection

    // Reserve index for adhesion connection
    uint adhesionIndex = atomicAdd(adhesionCount, 1);
    if (adhesionIndex > u_maxAdhesions) {
        atomicMin(adhesionCount, u_maxAdhesions); // Clamp cell count
        return; // No space for new adhesion connections
    }
    connections[adhesionIndex] = newAdhesion;
}
