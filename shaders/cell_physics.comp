#version 430

// Local work group size
layout(local_size_x = 64, local_size_y = 1, local_size_z = 1) in;

// SSBOs: Structure of Arrays
layout(std430, binding = 0) buffer Positions {
    vec4 positions[]; // xyz = position, w = radius
};
layout(std430, binding = 1) buffer Velocities {
    vec4 velocities[]; // xyz = velocity, w = mass
};
layout(std430, binding = 2) buffer Accelerations {
    vec4 accelerations[]; // xyz = acceleration, w = unused
};
layout(std430, binding = 3) buffer Masses {
    float masses[];
};
layout(std430, binding = 4) buffer Radii {
    float radii[];
};

// Uniforms
uniform float u_deltaTime;
uniform int u_cellCount;
uniform float u_damping;
uniform int u_draggedCellIndex; // Index of cell being dragged (-1 if none)

void main() {
    uint index = gl_GlobalInvocationID.x;
    
    // Check bounds
    if (index >= u_cellCount) {
        return;
    }
    
    // Skip physics for dragged cell - it will be positioned directly
    if (int(index) == u_draggedCellIndex) {
        // Clear velocity for dragged cell
        velocities[index] = vec4(0.0);
        return;
    }
    
    // Reset acceleration
    accelerations[index] = vec4(0.0);
    
    // Calculate forces from other cells (collision resolution)
    vec3 totalForce = vec3(0.0);
    vec3 myPos = positions[index].xyz;
    float myRadius = radii[index];
    float myMass = masses[index];
    
    for (uint j = 0; j < u_cellCount; ++j) {
        if (j == index) continue;
        
        vec3 otherPos = positions[j].xyz;
        float otherRadius = radii[j];
        
        vec3 delta = myPos - otherPos;
        float distance = length(delta);
        float minDistance = myRadius + otherRadius;
        
        if (distance < minDistance && distance > 0.001) {
            // Collision detected - apply repulsion force
            vec3 direction = normalize(delta);
            float overlap = minDistance - distance;
            totalForce += direction * overlap * 100.0; // Force strength
        }
    }
    
    // Store acceleration (F = ma, so a = F/m)
    accelerations[index] = vec4(totalForce, 0.) / myMass;
}
