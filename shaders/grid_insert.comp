#version 430

// Local work group size
layout(local_size_x = 64, local_size_y = 1, local_size_z = 1) in;

// Cell data structure for compute shader
struct ComputeCell {
    vec4 positionAndRadius;  // x, y, z, radius
    vec4 velocityAndMass;    // vx, vy, vz, mass
    vec4 acceleration;       // ax, ay, az, unused
};

// Shader storage buffer objects
layout(std430, binding = 0) restrict buffer CellBuffer {
    ComputeCell cells[];
};

layout(std430, binding = 1) restrict buffer GridBuffer {
    uint gridCells[];  // Stores cell indices for each grid cell
};

layout(std430, binding = 2) restrict buffer GridOffsetBuffer {
    uint gridOffsets[];
};

layout(std430, binding = 3) restrict buffer GridCountBuffer {
    uint gridCounts[];
};

// Uniforms
uniform int u_cellCount;
uniform int u_gridResolution;
uniform float u_gridCellSize;
uniform float u_worldSize;
uniform int u_maxCellsPerGrid;

// Function to convert world position to grid coordinates
ivec3 worldToGrid(vec3 worldPos) {
    // Clamp to world bounds first
    vec3 clampedPos = clamp(worldPos, vec3(-u_worldSize * 0.5), vec3(u_worldSize * 0.5));
    
    // Convert to grid coordinates [0, gridResolution)
    vec3 normalizedPos = (clampedPos + u_worldSize * 0.5) / u_worldSize;
    ivec3 gridPos = ivec3(normalizedPos * u_gridResolution);
    
    // Ensure we stay within bounds
    return clamp(gridPos, ivec3(0), ivec3(u_gridResolution - 1));
}

// Function to convert 3D grid coordinates to 1D index
uint gridToIndex(ivec3 gridPos) {
    return uint(gridPos.x + gridPos.y * u_gridResolution + gridPos.z * u_gridResolution * u_gridResolution);
}

void main() {
    uint cellIndex = gl_GlobalInvocationID.x;
    
    // Check bounds
    if (cellIndex >= u_cellCount) {
        return;
    }
    
    // Get cell position
    vec3 cellPos = cells[cellIndex].positionAndRadius.xyz;
    
    // Convert to grid coordinates
    ivec3 gridPos = worldToGrid(cellPos);
    uint gridIndex = gridToIndex(gridPos);
    
    // Get the offset for this grid cell and atomically claim a slot
    uint slotIndex = atomicAdd(gridOffsets[gridIndex], 1);
    
    // Calculate the actual index in the grid buffer
    uint gridBufferIndex = gridIndex * u_maxCellsPerGrid + slotIndex;
    
    // Make sure we don't exceed the maximum cells per grid cell
    if (slotIndex < u_maxCellsPerGrid) {
        gridCells[gridBufferIndex] = cellIndex;
    }
}
