#version 430

layout(local_size_x = 64) in;

// Might get away with using vec4 instead of ComputeCell but lets be safe for now
// Cell data structure for compute shader
struct ComputeCell {
    vec4 positionAndRadius;  // x, y, z, radius
    vec4 velocityAndMass;    // vx, vy, vz, mass
    vec4 acceleration;       // ax, ay, az, unused
};

layout(std430, binding = 0) buffer CellBuffer {
    ComputeCell cells[]; // existing simulation buffer
};

layout(std430, binding = 1) buffer CommandBuffer {
    ComputeCell newCells[];
};

uniform int u_existingCellCount;
uniform int u_newCellCount;

void main() {
    uint i = gl_GlobalInvocationID.x;
    if (i >= u_newCellCount) return;

    // Write into the next available space
    cells[u_existingCellCount + i] = newCells[i];
}