#version 430

// Local work group size
layout(local_size_x = 64, local_size_y = 1, local_size_z = 1) in;

// mode data structure for compute shader
struct GPUMode {
    vec4 color;
    vec2 splitOrientation;
    ivec2 childModes;
    float splitInterval;
    int genomeOffset;
    float[2] padding;
};

struct ComputeCell {
  // Physics:
  vec4 positionAndMass; // x, y, z, mass
  vec3 velocity;
  vec3 acceleration;
  vec4 orientation; // angular stuff in quaternion to prevent gimbal lock
  vec4 angularVelocity;
  vec4 angularAcceleration;
  // Internal:
  vec4 signallingSubstances; // 4 substances for now
  int modeIndex;
  float age; // also used for split timer
  float toxins;
  float nitrates;
};

// Shader storage buffer objects
layout(std430, binding = 0) restrict buffer modeBuffer {
    GPUMode modes[];
};

layout(std430, binding = 1) restrict buffer CellInputBuffer {
    ComputeCell inputCells[];  // Previous frame cell data (read-only)
};

layout(std430, binding = 2) restrict buffer CellOutputBuffer {
    ComputeCell outputCells[];  // Current frame cell data (write-only)
};

// Uniforms
uniform float u_deltaTime;

void main() {
    uint index = gl_GlobalInvocationID.x;
    GPUMode mode = modes[inputCells[index].modeIndex];

    outputCells[index].age = inputCells[index].age + u_deltaTime;

};