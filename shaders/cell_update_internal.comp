#version 430 core

layout(local_size_x = 64, local_size_y = 1, local_size_z = 1) in;

struct GPUMode {
    vec4 color;             // r, g, b, padding
    vec4 orientationA;      // quaternion
    vec4 orientationB;      // quaternion
    vec4 splitDirection;  // x, y, z, padding
    ivec2 childModes;
    float splitInterval;
    int genomeOffset;
};

struct ComputeCell {
    vec4 positionAndMass;
    vec3 velocity;
    vec3 acceleration;
    vec4 orientation;
    vec4 angularVelocity;
    vec4 angularAcceleration;
    vec4 signallingSubstances;
    int modeIndex;
    float age;
    float toxins;
    float nitrates;
};

layout(std430, binding = 0) restrict buffer modeBuffer {
    GPUMode modes[];
};

layout(std430, binding = 1) restrict buffer CellBuffer {
    ComputeCell cells[];
};

layout(std430, binding = 2) buffer CellAdditionQueue {
    ComputeCell newCells[];
};

layout(std430, binding = 3) buffer CellCountBuffer {
    uint cellCount;
    uint pendingCellCount;
};

uniform float u_deltaTime;
uniform int u_maxCells;

vec4 quatMultiply(vec4 q1, vec4 q2) {
    return vec4(
        q1.w*q2.x + q1.x*q2.w + q1.y*q2.z - q1.z*q2.y,
        q1.w*q2.y - q1.x*q2.z + q1.y*q2.w + q1.z*q2.x,
        q1.w*q2.z + q1.x*q2.y - q1.y*q2.x + q1.z*q2.w,
        q1.w*q2.w - q1.x*q2.x - q1.y*q2.y - q1.z*q2.z
    );
}

vec3 rotateVectorByQuaternion(vec3 v, vec4 q) {
    // v' = q * v * q^-1
    // Optimized version using cross product:
    vec3 u = q.xyz;
    float s = q.w;

    return 2.0 * dot(u, v) * u
         + (s * s - dot(u, u)) * v
         + 2.0 * s * cross(u, v);
}

void main() {
    uint index = gl_GlobalInvocationID.x;
    if (index >= cellCount) {
        return;
    }
    ComputeCell cell = cells[index]; // Read from current buffer
    GPUMode mode = modes[cell.modeIndex];

    cell.age += u_deltaTime;
    if (cell.age >= mode.splitInterval) {
        // Estimate new total number of cells
        uint currentTotal = atomicAdd(pendingCellCount, 0); // Read current pending count
        if (cellCount + currentTotal < u_maxCells) {
            // Atomically reserve a slot in the addition queue
            uint queueIdx = atomicAdd(pendingCellCount, 1);
            vec3 offset = rotateVectorByQuaternion(mode.splitDirection.xyz, cell.orientation) * 0.5;

            // Both child cells should start with the same age after the split
            // Since we already aged the parent cell by deltaTime this frame,
            // we need to subtract the excess age beyond the split interval
            float startAge = cell.age - mode.splitInterval;

            // Convert input quaternions
            vec4 q_parent = cell.orientation;
            vec4 q_childA = normalize(quatMultiply(q_parent, mode.orientationA));
            vec4 q_childB = normalize(quatMultiply(q_parent, mode.orientationB));

            ComputeCell childA = cell;
            childA.positionAndMass.xyz += offset;
            childA.age = startAge;
            childA.modeIndex = mode.childModes.x;
            childA.orientation = q_childA;

            ComputeCell childB = cell;
            childB.positionAndMass.xyz -= offset;
            childB.age = startAge;
            childB.modeIndex = mode.childModes.y;
            childB.orientation = q_childB;

            // Store new cells
            cells[index] = childA;
            newCells[queueIdx] = childB;
        } else {
            // Can't divide � just continue aging
            cells[index] = cell;
        }
    } else {
        // Not ready to divide � age normally
        cells[index] = cell;
    }
}
