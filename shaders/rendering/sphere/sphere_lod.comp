#version 430 core
#extension GL_ARB_gpu_shader_int64 : enable

layout(local_size_x = 64, local_size_y = 1, local_size_z = 1) in;

// Cell data structure for compute shader (must match CellManager)
struct ComputeCell {
    vec4 positionAndMass;
    vec4 velocity;
    vec4 acceleration;
    vec4 orientation;
    vec4 angularVelocity;
    vec4 angularAcceleration;
    vec4 signallingSubstances;
    int modeIndex;
    float age;
    float toxins;
    float nitrates;
    uint64_t uniqueID;
    uint64_t padding1;
    uint padding2[4];
};

// mode data structure for compute shader
struct GPUMode {
    vec4 color;             // r, g, b, padding
    vec4 orientationA;      // quaternion
    vec4 orientationB;      // quaternion
    vec4 splitDirection;  // x, y, z, padding
    ivec2 childModes;
    float splitInterval;
    int genomeOffset;
};

// Instance data structure for rendering
struct InstanceData {
    vec4 positionAndRadius;
    vec4 color;
    vec4 orientation;
};

// Input buffers
layout(std430, binding = 0) buffer CellBuffer {
    ComputeCell cellData[];
};

layout(std430, binding = 1) buffer ModeBuffer {
    GPUMode modes[];
};

layout(std430, binding = 2) buffer CellCountBuffer {
    uint cellCount;
    uint pendingCellCount;
};

// Output buffers - separate for each LOD level
layout(std430, binding = 3) buffer InstanceBufferLOD0 {
    InstanceData instanceDataLOD0[];
};

layout(std430, binding = 4) buffer InstanceBufferLOD1 {
    InstanceData instanceDataLOD1[];
};

layout(std430, binding = 5) buffer InstanceBufferLOD2 {
    InstanceData instanceDataLOD2[];
};

layout(std430, binding = 6) buffer InstanceBufferLOD3 {
    InstanceData instanceDataLOD3[];
};

// LOD count buffer to track instances per LOD level
layout(std430, binding = 7) buffer LODCountBuffer {
    uint lodCounts[4];  // Count of instances for each LOD level
};

// Uniforms
uniform vec3 u_cameraPos;
uniform float u_lodDistances[4];  // Distance thresholds for LOD levels

void main() {
    uint index = gl_GlobalInvocationID.x;
    
    if (index >= cellCount) return;
    
    // Calculate cell radius and position
    vec3 cellPos = cellData[index].positionAndMass.xyz;
    float cellRadius = pow(cellData[index].positionAndMass.w, 1.0/3.0);
    
    // Calculate distance from camera to cell surface
    float distanceToCamera = distance(u_cameraPos, cellPos) - cellRadius;
    
    // Determine LOD level based on distance
    uint lodLevel = 3; // Default to lowest detail
    if (distanceToCamera < u_lodDistances[0]) {
        lodLevel = 0; // Highest detail
    } else if (distanceToCamera < u_lodDistances[1]) {
        lodLevel = 1; // High detail
    } else if (distanceToCamera < u_lodDistances[2]) {
        lodLevel = 2; // Medium detail
    }
    // else lodLevel = 3 (lowest detail)
    
    // Create instance data
    InstanceData instance;
    instance.positionAndRadius = vec4(cellPos, cellRadius);
    instance.color = modes[cellData[index].modeIndex].color;
    instance.orientation = cellData[index].orientation;
    
    // Atomically increment the count for this LOD level and get the write index
    uint writeIndex = atomicAdd(lodCounts[lodLevel], 1);
    
    // Write instance data to the appropriate LOD buffer
    if (lodLevel == 0) {
        instanceDataLOD0[writeIndex] = instance;
    } else if (lodLevel == 1) {
        instanceDataLOD1[writeIndex] = instance;
    } else if (lodLevel == 2) {
        instanceDataLOD2[writeIndex] = instance;
    } else { // lodLevel == 3
        instanceDataLOD3[writeIndex] = instance;
    }
} 