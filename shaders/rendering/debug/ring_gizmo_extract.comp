#version 430 core

layout(local_size_x = 64, local_size_y = 1, local_size_z = 1) in;

// Cell data structure matching the one in the main simulation
struct ComputeCell {
    vec4 positionAndMass; // x, y, z, mass
    vec4 velocity;        // Fixed to match CPU layout
    vec4 acceleration;    // Fixed to match CPU layout
    vec4 orientation;     // quaternion: w, x, y, z
    vec4 angularVelocity;
    vec4 angularAcceleration;
    vec4 signallingSubstances;
    int modeIndex;
    float age;
    float toxins;
    float nitrates;
};

struct AdhesionSettings
{
    bool canBreak;
    float breakForce;
    float restLength;
    float linearSpringStiffness;
    float linearSpringDamping;
    float orientationSpringStiffness;
    float orientationSpringDamping;
    float maxAngularDeviation; // degrees
};

// GPU Mode structure
struct GPUMode {
    vec4 color;           // R, G, B, padding
    vec4 orientationA;    // quaternion
    vec4 orientationB;    // quaternion
    vec4 splitDirection;  // x, y, z, padding
    ivec2 childModes;     // mode indices for children
    float splitInterval;
    int genomeOffset;
    AdhesionSettings adhesionSettings;
    int parentMakeAdhesion; // Boolean flag for adhesion creation
    int padding[3];          // Padding to maintain alignment
};

// Ring vertex data - each cell generates 2 rings (blue and red) with thickness
struct RingVertex {
    vec4 position;    // World position (w unused, but needed for alignment)
    vec4 color;       // RGB color (a unused, but needed for alignment)
};

// Input: Cell data
layout(std430, binding = 0) buffer CellBuffer {
    ComputeCell cells[];
};

// Input: Mode data
layout(std430, binding = 1) buffer ModeBuffer {
    GPUMode modes[];
};

// Output: Ring vertices
layout(std430, binding = 2) buffer RingBuffer {
    RingVertex ringVertices[];
};

// Cell count
layout(std430, binding = 3) buffer CellCountBuffer {
    uint cellCount;
    uint pendingCellCount;
};

// Convert quaternion to rotation matrix
mat3 quatToMat3(vec4 quat) {
    float x = quat.x, y = quat.y, z = quat.z, w = quat.w;
    float x2 = x + x, y2 = y + y, z2 = z + z;
    float xx = x * x2, xy = x * y2, xz = x * z2;
    float yy = y * y2, yz = y * z2, zz = z * z2;
    float wx = w * x2, wy = w * y2, wz = w * z2;

    return mat3(
        1.0 - (yy + zz), xy + wz, xz - wy,
        xy - wz, 1.0 - (xx + zz), yz + wx,
        xz + wy, yz - wx, 1.0 - (xx + yy)
    );
}

void main() {
    uint cellIndex = gl_GlobalInvocationID.x;
    
    if (cellIndex >= cellCount) return;
    
    ComputeCell cell = cells[cellIndex];
    vec3 cellPos = cell.positionAndMass.xyz;
    float cellRadius = pow(cell.positionAndMass.w, 1.0/3.0);
    
    // Get the mode for this cell
    GPUMode mode = modes[cell.modeIndex];
    
    // Convert quaternion to rotation matrix for cell orientation
    mat3 cellRotMatrix = quatToMat3(cell.orientation);
    
    // Get the split direction vector (already normalized)
    vec3 splitDirection = normalize(mode.splitDirection.xyz);
    
    // Transform split direction to world space using cell orientation
    vec3 worldSplitDirection = cellRotMatrix * splitDirection;
    
    // Calculate ring dimensions based on cell size
    float outerRadius = cellRadius * 1.2; // 2x the cell radius
    float innerRadius = cellRadius * 1.4; // 1.5x the cell radius for thickness
    
    // Calculate ring center offset from cell center
    float offsetDistance = 0.001; // Small offset to prevent z-fighting
    
    // Generate two rings: one blue, one red, offset in opposite directions
    vec3 blueRingCenter = cellPos + worldSplitDirection * offsetDistance;
    vec3 redRingCenter = cellPos - worldSplitDirection * offsetDistance;
    
    // Calculate perpendicular vectors to create the ring plane
    vec3 up = vec3(0.0, 1.0, 0.0);
    vec3 right = normalize(cross(worldSplitDirection, up));
    up = normalize(cross(right, worldSplitDirection));
    
    // Number of segments per ring (more segments = smoother ring)
    const int segmentsPerRing = 32;
    
    // Each ring: segmentsPerRing * 6 vertices (2 triangles per segment)
    uint blueBase = cellIndex * segmentsPerRing * 6 * 2;
    uint redBase = blueBase + segmentsPerRing * 6;
    
    // --- Blue Ring ---
    for (int i = 0; i < segmentsPerRing; i++) {
        float angle1 = (2.0 * 3.14159 * float(i)) / float(segmentsPerRing);
        float angle2 = (2.0 * 3.14159 * float((i + 1) % segmentsPerRing)) / float(segmentsPerRing);
        
        vec3 inner1 = blueRingCenter + (right * cos(angle1) + up * sin(angle1)) * innerRadius;
        vec3 outer1 = blueRingCenter + (right * cos(angle1) + up * sin(angle1)) * outerRadius;
        vec3 inner2 = blueRingCenter + (right * cos(angle2) + up * sin(angle2)) * innerRadius;
        vec3 outer2 = blueRingCenter + (right * cos(angle2) + up * sin(angle2)) * outerRadius;
        
        // Triangle 1: inner1, inner2, outer1 (reversed winding)
        ringVertices[blueBase + i * 6 + 0].position = vec4(inner1, 1.0);
        ringVertices[blueBase + i * 6 + 0].color = vec4(1.0, 0.0, 0.0, 1.0);
        ringVertices[blueBase + i * 6 + 1].position = vec4(inner2, 1.0);
        ringVertices[blueBase + i * 6 + 1].color = vec4(1.0, 0.0, 0.0, 1.0);
        ringVertices[blueBase + i * 6 + 2].position = vec4(outer1, 1.0);
        ringVertices[blueBase + i * 6 + 2].color = vec4(1.0, 0.0, 0.0, 1.0);
        
        // Triangle 2: outer1, inner2, outer2 (reversed winding)
        ringVertices[blueBase + i * 6 + 3].position = vec4(outer1, 1.0);
        ringVertices[blueBase + i * 6 + 3].color = vec4(1.0, 0.0, 0.0, 1.0);
        ringVertices[blueBase + i * 6 + 4].position = vec4(inner2, 1.0);
        ringVertices[blueBase + i * 6 + 4].color = vec4(1.0, 0.0, 0.0, 1.0);
        ringVertices[blueBase + i * 6 + 5].position = vec4(outer2, 1.0);
        ringVertices[blueBase + i * 6 + 5].color = vec4(1.0, 0.0, 0.0, 1.0);
    }
    
    // --- Red Ring ---
    for (int i = 0; i < segmentsPerRing; i++) {
        float angle1 = (2.0 * 3.14159 * float(i)) / float(segmentsPerRing);
        float angle2 = (2.0 * 3.14159 * float((i + 1) % segmentsPerRing)) / float(segmentsPerRing);
        
        vec3 inner1 = redRingCenter + (right * cos(angle1) + up * sin(angle1)) * innerRadius;
        vec3 outer1 = redRingCenter + (right * cos(angle1) + up * sin(angle1)) * outerRadius;
        vec3 inner2 = redRingCenter + (right * cos(angle2) + up * sin(angle2)) * innerRadius;
        vec3 outer2 = redRingCenter + (right * cos(angle2) + up * sin(angle2)) * outerRadius;
        
        // Triangle 1: inner1, outer1, inner2
        ringVertices[redBase + i * 6 + 0].position = vec4(inner1, 1.0);
        ringVertices[redBase + i * 6 + 0].color = vec4(0.0, 0.0, 1.0, 1.0);
        ringVertices[redBase + i * 6 + 1].position = vec4(outer1, 1.0);
        ringVertices[redBase + i * 6 + 1].color = vec4(0.0, 0.0, 1.0, 1.0);
        ringVertices[redBase + i * 6 + 2].position = vec4(inner2, 1.0);
        ringVertices[redBase + i * 6 + 2].color = vec4(0.0, 0.0, 1.0, 1.0);
        
        // Triangle 2: outer1, outer2, inner2
        ringVertices[redBase + i * 6 + 3].position = vec4(outer1, 1.0);
        ringVertices[redBase + i * 6 + 3].color = vec4(0.0, 0.0, 1.0, 1.0);
        ringVertices[redBase + i * 6 + 4].position = vec4(outer2, 1.0);
        ringVertices[redBase + i * 6 + 4].color = vec4(0.0, 0.0, 1.0, 1.0);
        ringVertices[redBase + i * 6 + 5].position = vec4(inner2, 1.0);
        ringVertices[redBase + i * 6 + 5].color = vec4(0.0, 0.0, 1.0, 1.0);
    }
} 