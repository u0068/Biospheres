#version 430 core

layout(local_size_x = 64, local_size_y = 1, local_size_z = 1) in;

// Cell data structure for compute shader
struct ComputeCell {
    // Physics:
    vec4 positionAndMass; // x, y, z, mass
    vec4 velocity;        // Fixed to match CPU layout
    vec4 acceleration;    // Fixed to match CPU layout
    vec4 orientation;     // angular stuff in quaternion to prevent gimbal lock
    vec4 angularVelocity;
    vec4 angularAcceleration;
    // Internal:
    vec4 signallingSubstances; // 4 substances for now
    int modeIndex;  // absolute index of the cell's mode
    float age; // also used for split timer
    float toxins;
    float nitrates;
    int adhesionIndices[20];
};

// Adhesion connection structure - stores permanent connections between sibling cells
struct AdhesionConnection {
    uint cellAIndex;      // Index of first cell in the connection
    uint cellBIndex;      // Index of second cell in the connection
    uint modeIndex;       // Mode index for the connection ( to lookup adhesion settings )
    uint isActive;        // Whether this connection is still active (1 = active, 0 = inactive)
};

// Adhesion line vertex data - each line has 2 vertices
// This struct must match the C++ AdhesionLineVertex struct exactly
struct AdhesionLineVertex {
    vec4 position;    // World position (w unused, but needed for alignment)
    vec4 color;       // RGB color (a unused, but needed for alignment)
};

// Input: Cell data
layout(std430, binding = 0) buffer CellBuffer {
    ComputeCell cells[];
};

layout(std430, binding = 1) coherent buffer AdhesionConnectionBuffer {
    AdhesionConnection connections[];
};

// Output: Adhesion line vertices
layout(std430, binding = 2) coherent buffer AdhesionLineBuffer {
    AdhesionLineVertex lineVertices[];
};

// Cell count
layout(std430, binding = 3) coherent buffer CellCountBuffer {
    uint totalCellCount;
    uint liveCellCount;
    uint totalAdhesionCount;
    int freeAdhesionTop;
};

void main() {
    uint index = gl_GlobalInvocationID.x;
    
    if (index >= totalAdhesionCount) {
        return;
    }
    
    AdhesionConnection currentAdhesion = connections[index];
    
    // Only process active connections
    if (currentAdhesion.isActive == 0) {
        return;
    }
    
    // Additional bounds checking to prevent invalid cell access
    if (currentAdhesion.cellAIndex >= totalCellCount || currentAdhesion.cellBIndex >= totalCellCount) {
        return;
    }
    
    // Calculate line vertices
    vec3 posA = cells[currentAdhesion.cellAIndex].positionAndMass.xyz;
    vec3 posB = cells[currentAdhesion.cellBIndex].positionAndMass.xyz;
    
    // Use a distinctive color for adhesion lines (orange/amber)
    float ratio = (totalAdhesionCount > 1) ? (index / float(totalAdhesionCount - 1)) : 0.0;
    vec4 lineColor = vec4(1.0, ratio, 0.0, 1.0); // Orange/Amber for active
    
    // Each cell pair generates one line (2 vertices)
    // We use the current cell's index to determine where to store the line
    uint lineIndex = index * 2;
    
    // Store the line vertices
    if (lineIndex < lineVertices.length() && lineIndex + 1 < lineVertices.length()) {
        lineVertices[lineIndex].position = vec4(posA, 1.0);
        lineVertices[lineIndex].color = lineColor;
        
        lineVertices[lineIndex + 1].position = vec4(posB, 1.0);
        lineVertices[lineIndex + 1].color = lineColor;
    }
} 