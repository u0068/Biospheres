#version 430 core
#extension GL_ARB_gpu_shader_int64 : enable

layout(local_size_x = 64, local_size_y = 1, local_size_z = 1) in;

// Cell data structure matching the one in the main simulation
struct ComputeCell {
    vec4 positionAndMass; // x, y, z, mass
    vec4 velocity;        // Fixed to match CPU layout
    vec4 acceleration;    // Fixed to match CPU layout
    vec4 orientation;     // quaternion: w, x, y, z
    vec4 angularVelocity;
    vec4 angularAcceleration;
    vec4 signallingSubstances;
    int modeIndex;
    float age;
    float toxins;
    float nitrates;
    // Unique ID system
    uint64_t uniqueID;     // Packed ID: [parent(32)] [cell(31)] [child(1)]
    uint64_t padding1;     // Padding to maintain alignment
    uint padding2[4];    // Additional padding to ensure 16-byte alignment
};

// GPU Mode structure
struct GPUMode {
    vec4 color;           // R, G, B, padding
    vec4 orientationA;    // quaternion
    vec4 orientationB;    // quaternion
    vec4 splitDirection;  // x, y, z, padding
    ivec2 childModes;     // mode indices for children
    float splitInterval;
    int genomeOffset;
    int parentMakeAdhesion; // Boolean flag for adhesion creation
    int padding;          // Padding to maintain alignment
};

// Adhesion line vertex data - each line has 2 vertices
struct AdhesionLineVertex {
    vec4 position;    // World position (w unused, but needed for alignment)
    vec4 color;       // RGB color (a unused, but needed for alignment)
};

// Input: Cell data
layout(std430, binding = 0) buffer CellBuffer {
    ComputeCell cells[];
};

// Input: Mode data
layout(std430, binding = 1) buffer ModeBuffer {
    GPUMode modes[];
};

// Output: Adhesion line vertices
layout(std430, binding = 2) buffer AdhesionLineBuffer {
    AdhesionLineVertex lineVertices[];
};

// Cell count
layout(std430, binding = 3) buffer CellCountBuffer {
    uint cellCount;
    uint pendingCellCount;
};

// Extract parent ID from unique ID
uint getParentID(uint64_t uniqueID) {
    return uint((uniqueID >> 32) & 0xFFFFFFFF);
}

// Extract cell ID from unique ID
uint getCellID(uint64_t uniqueID) {
    return uint((uniqueID >> 1) & 0x7FFFFFFF);
}

// Extract child flag from unique ID (0 = child A, 1 = child B)
uint getChildFlag(uint64_t uniqueID) {
    return uint(uniqueID & 0x1);
}

void main() {
    uint index = gl_GlobalInvocationID.x;
    
    if (index >= cellCount) {
        return;
    }
    
    ComputeCell currentCell = cells[index];
    
    // Skip cells with no parent (initial spawned cells)
    uint parentID = getParentID(currentCell.uniqueID);
    if (parentID == 0) {
        return;
    }
    
    // Get the parent's mode to check if adhesion is enabled
    if (currentCell.modeIndex < 0 || currentCell.modeIndex >= modes.length()) {
        return;
    }
    
    GPUMode parentMode = modes[currentCell.modeIndex];
    
    // Skip if parent doesn't make adhesion
    if (parentMode.parentMakeAdhesion == 0) {
        return;
    }
    
    // Only process child A to avoid duplicate lines (child B will be found by child A)
    uint childFlag = getChildFlag(currentCell.uniqueID);
    if (childFlag != 0) {
        return; // Skip child B
    }
    
    // Look for sibling (child B with same parent ID)
    uint siblingIndex = 0xFFFFFFFF; // Invalid index
    
    for (uint i = 0; i < cellCount; i++) {
        if (i == index) continue; // Skip self
        
        ComputeCell otherCell = cells[i];
        uint otherParentID = getParentID(otherCell.uniqueID);
        uint otherChildFlag = getChildFlag(otherCell.uniqueID);
        
        // Check if it's our sibling (same parent, different child flag)
        if (otherParentID == parentID && otherChildFlag == 1) {
            siblingIndex = i;
            break;
        }
    }
    
    // If no sibling found, no line to draw
    if (siblingIndex == 0xFFFFFFFF) {
        return;
    }
    
    ComputeCell siblingCell = cells[siblingIndex];
    
    // Calculate line vertices
    vec3 posA = currentCell.positionAndMass.xyz;
    vec3 posB = siblingCell.positionAndMass.xyz;
    
    // Use a distinctive color for adhesion lines (orange/amber)
    vec4 lineColor = vec4(1.0, 0.6, 0.2, 1.0); // Orange color
    
    // Each cell pair generates one line (2 vertices)
    // We use the current cell's index to determine where to store the line
    uint lineIndex = index * 2;
    
    // Store the line vertices
    if (lineIndex < lineVertices.length() && lineIndex + 1 < lineVertices.length()) {
        lineVertices[lineIndex].position = vec4(posA, 1.0);
        lineVertices[lineIndex].color = lineColor;
        
        lineVertices[lineIndex + 1].position = vec4(posB, 1.0);
        lineVertices[lineIndex + 1].color = lineColor;
    }
} 