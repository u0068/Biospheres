#version 430 core
#extension GL_ARB_gpu_shader_int64 : enable

layout(local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

// Cell data structure matching the one in the main simulation
struct ComputeCell {
    vec4 positionAndMass; // x, y, z, mass
    vec4 velocity;        // Fixed to match CPU layout
    vec4 acceleration;    // Fixed to match CPU layout
    vec4 orientation;     // quaternion: w, x, y, z
    vec4 angularVelocity;
    vec4 angularAcceleration;
    vec4 signallingSubstances;
    int modeIndex;
    float age;
    float toxins;
    float nitrates;
    // Unique ID system
    uint64_t uniqueID;     // Packed ID: [parent(32)] [cell(31)] [child(1)]
    uint64_t padding1;     // Padding to maintain alignment
    uint padding2[4];    // Additional padding to ensure 16-byte alignment
};

// GPU Mode structure
struct GPUMode {
    vec4 color;           // R, G, B, padding
    vec4 orientationA;    // quaternion
    vec4 orientationB;    // quaternion
    vec4 splitDirection;  // x, y, z, padding
    ivec2 childModes;     // mode indices for children
    float splitInterval;
    int genomeOffset;
    int parentMakeAdhesion; // Boolean flag for adhesion creation
    int padding;          // Padding to maintain alignment
};

// Spatial index structure - maps parent ID to child indices
struct ParentIndex {
    uint parentID;        // Parent ID
    uint childAIndex;     // Index of child A (child flag = 0)
    uint childBIndex;     // Index of child B (child flag = 1)
    uint isActive;        // Whether this parent has active children
};

// Adhesion line vertex data - each line has 2 vertices
struct AdhesionLineVertex {
    vec4 position;    // World position (w unused, but needed for alignment)
    vec4 color;       // RGB color (a unused, but needed for alignment)
};

// Input: Cell data
layout(std430, binding = 0) buffer CellBuffer {
    ComputeCell cells[];
};

// Input: Mode data
layout(std430, binding = 1) buffer ModeBuffer {
    GPUMode modes[];
};

// Input: Spatial index (pre-computed parent lookup table)
layout(std430, binding = 2) buffer ParentIndexBuffer {
    ParentIndex parentIndices[];
};

// Output: Adhesion line vertices
layout(std430, binding = 3) buffer AdhesionLineBuffer {
    AdhesionLineVertex lineVertices[];
};

// Cell count and parent index count
layout(std430, binding = 4) buffer CountBuffer {
    uint cellCount;
    uint parentIndexCount;
    uint padding[2];
};

// Extract parent ID from unique ID
uint getParentID(uint64_t uniqueID) {
    return uint((uniqueID >> 32) & 0xFFFFFFFF);
}

// Extract child flag from unique ID (0 = child A, 1 = child B)
uint getChildFlag(uint64_t uniqueID) {
    return uint(uniqueID & 0x1);
}

void main() {
    uint index = gl_GlobalInvocationID.x;
    
    if (index >= parentIndexCount) {
        return;
    }
    
    ParentIndex parentIndex = parentIndices[index];
    
    // Skip inactive parents
    if (parentIndex.isActive == 0) {
        return;
    }
    
    // Validate child indices
    if (parentIndex.childAIndex >= cellCount || parentIndex.childBIndex >= cellCount) {
        return;
    }
    
    // Get the child cells
    ComputeCell childA = cells[parentIndex.childAIndex];
    ComputeCell childB = cells[parentIndex.childBIndex];
    
    // Verify these are actually the children of this parent
    uint childAParentID = getParentID(childA.uniqueID);
    uint childBParentID = getParentID(childB.uniqueID);
    uint childAFlag = getChildFlag(childA.uniqueID);
    uint childBFlag = getChildFlag(childB.uniqueID);
    
    if (childAParentID != parentIndex.parentID || 
        childBParentID != parentIndex.parentID ||
        childAFlag != 0 || childBFlag != 1) {
        return; // Invalid parent-child relationship
    }
    
    // Additional verification: ensure both cells have similar ages
    // This helps prevent connecting cells from different division events
    float ageDifference = abs(childA.age - childB.age);
    if (ageDifference >= 1.0) { // Reject if age difference is too large
        return;
    }
    
    // OPTIMIZED: Instead of searching through all modes (which is very expensive),
    // we'll check if either child's mode has parentMakeAdhesion enabled.
    // This is a reasonable approximation since children inherit properties from their parent.
    
    bool parentAllowsAdhesion = false;
    
    // Check child A's mode
    if (childA.modeIndex >= 0 && childA.modeIndex < modes.length()) {
        GPUMode modeA = modes[childA.modeIndex];
        if (modeA.parentMakeAdhesion == 1) {
            parentAllowsAdhesion = true;
        }
    }
    
    // Check child B's mode if child A didn't have it
    if (!parentAllowsAdhesion && childB.modeIndex >= 0 && childB.modeIndex < modes.length()) {
        GPUMode modeB = modes[childB.modeIndex];
        if (modeB.parentMakeAdhesion == 1) {
            parentAllowsAdhesion = true;
        }
    }
    
    if (!parentAllowsAdhesion) {
        return;
    }
    
    // Calculate line vertices
    vec3 posA = childA.positionAndMass.xyz;
    vec3 posB = childB.positionAndMass.xyz;
    
    // Use a distinctive color for adhesion lines (orange/amber)
    vec4 lineColor = vec4(1.0, 0.6, 0.2, 1.0); // Orange color
    
    // Each parent generates one line (2 vertices)
    uint lineIndex = index * 2;
    
    // Store the line vertices
    if (lineIndex < lineVertices.length() && lineIndex + 1 < lineVertices.length()) {
        lineVertices[lineIndex].position = vec4(posA, 1.0);
        lineVertices[lineIndex].color = lineColor;
        
        lineVertices[lineIndex + 1].position = vec4(posB, 1.0);
        lineVertices[lineIndex + 1].color = lineColor;
    }
} 