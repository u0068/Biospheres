#version 430 core
#extension GL_ARB_gpu_shader_int64 : enable

layout(local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

// Cell data structure matching the one in the main simulation
struct ComputeCell {
    vec4 positionAndMass; // x, y, z, mass
    vec4 velocity;        // Fixed to match CPU layout
    vec4 acceleration;    // Fixed to match CPU layout
    vec4 orientation;     // quaternion: w, x, y, z
    vec4 angularVelocity;
    vec4 angularAcceleration;
    vec4 signallingSubstances;
    int modeIndex;
    float age;
    float toxins;
    float nitrates;
    // Unique ID system
    uint64_t uniqueID;     // Packed ID: [parent(32)] [cell(31)] [child(1)]
    uint64_t padding1;     // Padding to maintain alignment
    uint padding2[4];    // Additional padding to ensure 16-byte alignment
};

// GPU Mode structure
struct GPUMode {
    vec4 color;           // R, G, B, padding
    vec4 orientationA;    // quaternion
    vec4 orientationB;    // quaternion
    vec4 splitDirection;  // x, y, z, padding
    ivec2 childModes;     // mode indices for children
    float splitInterval;
    int genomeOffset;
    int parentMakeAdhesion; // Boolean flag for adhesion creation
    int padding;          // Padding to maintain alignment
};

// Spatial index structure - maps parent ID to child indices
struct ParentIndex {
    uint parentID;        // Parent ID
    uint childAIndex;     // Index of child A (child flag = 0)
    uint childBIndex;     // Index of child B (child flag = 1)
    uint isActive;        // Whether this parent has active children
};

// Adhesion line vertex data - each line has 2 vertices
struct AdhesionLineVertex {
    vec4 position;    // World position (w unused, but needed for alignment)
    vec4 color;       // RGB color (a unused, but needed for alignment)
};

// Input: Cell data
layout(std430, binding = 0) buffer CellBuffer {
    ComputeCell cells[];
};

// Input: Mode data
layout(std430, binding = 1) buffer ModeBuffer {
    GPUMode modes[];
};

// Input: Spatial index (pre-computed parent lookup table)
layout(std430, binding = 2) buffer ParentIndexBuffer {
    ParentIndex parentIndices[];
};

// Output: Adhesion line vertices
layout(std430, binding = 3) buffer AdhesionLineBuffer {
    AdhesionLineVertex lineVertices[];
};

// Cell count and parent index count
layout(std430, binding = 4) buffer CountBuffer {
    uint cellCount;
    uint parentIndexCount;
    uint padding[2];
};

// Extract parent ID from unique ID
uint getParentID(uint64_t uniqueID) {
    return uint((uniqueID >> 32) & 0xFFFFFFFF);
}

// Extract child flag from unique ID (0 = child A, 1 = child B)
uint getChildFlag(uint64_t uniqueID) {
    return uint(uniqueID & 0x1);
}

// Convert quaternion to rotation matrix
mat3 quatToMat3(vec4 quat) {
    float x = quat.x, y = quat.y, z = quat.z, w = quat.w;
    float x2 = x + x, y2 = y + y, z2 = z + z;
    float xx = x * x2, xy = x * y2, xz = x * z2;
    float yy = y * y2, yz = y * z2, zz = z * z2;
    float wx = w * x2, wy = w * y2, wz = w * z2;

    return mat3(
        1.0 - (yy + zz), xy + wz, xz - wy,
        xy - wz, 1.0 - (xx + zz), yz + wx,
        xz + wy, yz - wx, 1.0 - (xx + yy)
    );
}

// Determine zone color based on position relative to cell's own split plane
vec4 getZoneColor(vec3 position, ComputeCell cell, GPUMode mode) {
    // Calculate the cell's own split plane based on its orientation
    mat3 cellRotMatrix = quatToMat3(cell.orientation);
    vec3 worldSplitDirection = normalize(cellRotMatrix * mode.splitDirection.xyz);
    
    // The split plane normal is the split direction, with the cell position as the plane point
    vec3 splitPlaneNormal = worldSplitDirection;
    vec3 splitPlanePoint = cell.positionAndMass.xyz;
    
    // Calculate distance from position to split plane
    vec3 toPosition = position - splitPlanePoint;
    float distance = dot(toPosition, splitPlaneNormal);
    
    // Calculate angle between the vector from cell position to the given position and the split plane normal
    vec3 directionFromCell = normalize(toPosition);
    float angle = acos(abs(dot(directionFromCell, splitPlaneNormal)));
    float angleDegrees = degrees(angle);
    
    // Zone C: within 10 degrees of being parallel to split plane (red)
    // A line is parallel to the split plane when it's perpendicular to the split plane normal
    // So we check if the angle is close to 90 degrees (perpendicular)
    if (abs(angleDegrees - 90.0) <= 10.0) {
        return vec4(1.0, 0.0, 0.0, 1.0); // Red
    }
    // Zone A: positive side of split plane (blue)
    else if (distance > 0.0) {
        return vec4(0.0, 0.0, 1.0, 1.0); // Blue
    }
    // Zone B: negative side of split plane (green)
    else {
        return vec4(0.0, 1.0, 0.0, 1.0); // Green
    }
}

void main() {
    uint index = gl_GlobalInvocationID.x;
    
    if (index >= parentIndexCount) {
        return;
    }
    
    ParentIndex parentIndex = parentIndices[index];
    
    // Skip inactive parents
    if (parentIndex.isActive == 0) {
        return;
    }
    
    // Validate child indices
    if (parentIndex.childAIndex >= cellCount || parentIndex.childBIndex >= cellCount) {
        return;
    }
    
    // Get the child cells
    ComputeCell childA = cells[parentIndex.childAIndex];
    ComputeCell childB = cells[parentIndex.childBIndex];
    
    // Verify these are actually the children of this parent
    uint childAParentID = getParentID(childA.uniqueID);
    uint childBParentID = getParentID(childB.uniqueID);
    uint childAFlag = getChildFlag(childA.uniqueID);
    uint childBFlag = getChildFlag(childB.uniqueID);
    
    if (childAParentID != parentIndex.parentID || 
        childBParentID != parentIndex.parentID ||
        childAFlag != 0 || childBFlag != 1) {
        return; // Invalid parent-child relationship
    }
    
    // OPTIMIZED: Instead of searching through all modes (which is very expensive),
    // we'll check if either child's mode has parentMakeAdhesion enabled.
    // This is a reasonable approximation since children inherit properties from their parent.
    
    bool parentAllowsAdhesion = false;
    GPUMode parentMode;
    
    // Check child A's mode
    if (childA.modeIndex >= 0 && childA.modeIndex < modes.length()) {
        parentMode = modes[childA.modeIndex];
        if (parentMode.parentMakeAdhesion == 1) {
            parentAllowsAdhesion = true;
        }
    }
    
    // Check child B's mode if child A didn't have it
    if (!parentAllowsAdhesion && childB.modeIndex >= 0 && childB.modeIndex < modes.length()) {
        parentMode = modes[childB.modeIndex];
        if (parentMode.parentMakeAdhesion == 1) {
            parentAllowsAdhesion = true;
        }
    }
    
    if (!parentAllowsAdhesion) {
        return;
    }
    
    // Calculate line vertices
    vec3 posA = childA.positionAndMass.xyz;
    vec3 posB = childB.positionAndMass.xyz;
    vec3 midpoint = (posA + posB) * 0.5;
    
    // Create two line segments: childA to midpoint, and midpoint to childB
    // Each parent now generates two lines (4 vertices total)
    uint lineIndex = index * 4;
    
    // Store the line vertices with zone-based coloring
    if (lineIndex + 3 < lineVertices.length()) {
        // Get the mode for each child (they might have different modes)
        // Add bounds checking for mode indices
        if (childA.modeIndex < 0 || childA.modeIndex >= modes.length() ||
            childB.modeIndex < 0 || childB.modeIndex >= modes.length()) {
            return; // Skip if mode indices are invalid
        }
        
        GPUMode childAMode = modes[childA.modeIndex];
        GPUMode childBMode = modes[childB.modeIndex];
        
        // First segment: childA to midpoint - color based on midpoint position relative to childA's split plane
        vec4 colorA = getZoneColor(midpoint, childA, childAMode);
        lineVertices[lineIndex].position = vec4(posA, 1.0);
        lineVertices[lineIndex].color = colorA;
        
        lineVertices[lineIndex + 1].position = vec4(midpoint, 1.0);
        lineVertices[lineIndex + 1].color = colorA;
        
        // Second segment: midpoint to childB - color based on midpoint position relative to childB's split plane
        vec4 colorB = getZoneColor(midpoint, childB, childBMode);
        lineVertices[lineIndex + 2].position = vec4(midpoint, 1.0);
        lineVertices[lineIndex + 2].color = colorB;
        
        lineVertices[lineIndex + 3].position = vec4(posB, 1.0);
        lineVertices[lineIndex + 3].color = colorB;
    }
} 