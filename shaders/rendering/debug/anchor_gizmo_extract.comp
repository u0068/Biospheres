#version 430 core

layout(local_size_x = 64, local_size_y = 1, local_size_z = 1) in;

// Cell data structure for compute shader
struct ComputeCell {
    // Physics:
    vec4 positionAndMass; // x, y, z, mass
    vec4 velocity;        // Fixed to match CPU layout
    vec4 acceleration;    // Fixed to match CPU layout
    vec4 orientation;     // angular stuff in quaternion to prevent gimbal lock
    vec4 angularVelocity;
    vec4 angularAcceleration;
    // Internal:
    vec4 signallingSubstances; // 4 substances for now
    int modeIndex;  // absolute index of the cell's mode
    float age; // also used for split timer
    float toxins;
    float nitrates;
    int adhesionIndices[20];
};

// Adhesion connection structure - stores permanent connections between sibling cells
struct AdhesionConnection {
    uint cellAIndex;      // Index of first cell in the connection
    uint cellBIndex;      // Index of second cell in the connection
    uint modeIndex;       // Mode index for the connection ( to lookup adhesion settings )
    uint isActive;        // Whether this connection is still active (1 = active, 0 = inactive)
};

struct AdhesionSettings
{
    bool canBreak;
    float breakForce;
    float restLength;
    float linearSpringStiffness;
    float linearSpringDamping;
    float orientationSpringStiffness;
    float orientationSpringDamping;
    float maxAngularDeviation; // degrees - 0 = strict orientation locking, >0 = flexible with max deviation
};

// GPU Mode structure
struct GPUMode {
    vec4 color;           // R, G, B, padding
    vec4 orientationA;    // quaternion
    vec4 orientationB;    // quaternion
    vec4 splitDirection;  // x, y, z, padding
    ivec2 childModes;     // mode indices for children
    float splitInterval;
    int genomeOffset;
    AdhesionSettings adhesionSettings;
    int parentMakeAdhesion; // Boolean flag for adhesion creation
    int padding[3];          // Padding to maintain alignment
};

// Anchor sphere instance data (matches cell rendering structure)
// Total size: 48 bytes (3 * vec4), 16-byte aligned
struct AnchorInstance {
    vec4 positionAndRadius;  // xyz = position, w = radius (16 bytes)
    vec4 color;              // rgb = color, a = unused (16 bytes)
    vec4 orientation;        // quaternion (unused for spheres, but matches structure) (16 bytes)
};

// Input: Cell data
layout(std430, binding = 0) buffer CellBuffer {
    ComputeCell cells[];
};

// Input: Mode data
layout(std430, binding = 1) buffer ModeBuffer {
    GPUMode modes[];
};

// Input: Adhesion connection data
layout(std430, binding = 2) buffer AdhesionConnectionBuffer {
    AdhesionConnection connections[];
};

// Output: Anchor instances
layout(std430, binding = 3) buffer AnchorBuffer {
    AnchorInstance anchorInstances[];
};

// Output: Total anchor count
layout(std430, binding = 4) buffer AnchorCountBuffer {
    uint totalAnchorCount;
};

// Cell count
layout(std430, binding = 5) buffer CellCountBuffer {
    uint totalCellCount;
    uint liveCellCount;
    uint totalAdhesionCount;
    uint freeAdhesionTop;
};

// Rotate vector by quaternion
vec3 rotateVectorByQuaternion(vec3 v, vec4 q) {
    vec3 u = q.xyz;
    float s = q.w;
    return 2.0 * dot(u, v) * u + (s * s - dot(u, u)) * v + 2.0 * s * cross(u, v);
}

void main() {
    uint cellIndex = gl_GlobalInvocationID.x;
    
    if (cellIndex >= totalCellCount) return;
    
    ComputeCell cell = cells[cellIndex];
    vec3 cellPos = cell.positionAndMass.xyz;
    float cellRadius = pow(cell.positionAndMass.w, 1.0/3.0);
    

    // Check each adhesion index for this cell
    for (int i = 0; i < 20; ++i) {
        int adhesionIndex = cell.adhesionIndices[i];
        if (adhesionIndex < 0) continue; // No adhesion connection
        
        AdhesionConnection connection = connections[adhesionIndex];
        if (connection.isActive == 0) continue; // Inactive connection
        
        // Get the adhesion mode to find the original split direction
        GPUMode adhesionMode = modes[connection.modeIndex];
        
        // Calculate anchor point for this cell
        // The anchor should point TOWARDS the other cell in the connection
        // When cells split, cell A goes in +splitDirection, cell B goes in -splitDirection
        // So the anchors should point back towards each other:
        // Cell A's anchor should point in -splitDirection (towards where B went)
        // Cell B's anchor should point in +splitDirection (towards where A went)
        bool isCellA = (connection.cellAIndex == cellIndex);
        vec3 anchorDirection = isCellA ? -adhesionMode.splitDirection.xyz : adhesionMode.splitDirection.xyz;
        vec3 anchor = rotateVectorByQuaternion(anchorDirection, cell.orientation);
        vec3 anchorPos = cellPos + anchor * cellRadius;
        
        // Calculate anchor sphere radius
        float anchorRadius = cellRadius * 0.15; // 15% of cell radius
        
        // Get instance index and create instance data
        uint anchorIndex = atomicAdd(totalAnchorCount, 1);
        
        // Create anchor instance (using the same structure as cell rendering)
        anchorInstances[anchorIndex].positionAndRadius = vec4(anchorPos, anchorRadius);
        anchorInstances[anchorIndex].color = isCellA ? vec4(0.0, 0.5, 1.0, 1.0) : vec4(1.0, 0.5, 0.0, 1.0); // Blue or Orange color
        anchorInstances[anchorIndex].orientation = vec4(0.0, 0.0, 0.0, 1.0); // Identity quaternion
    }
} 