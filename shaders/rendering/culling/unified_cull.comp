#version 430 core

layout(local_size_x = 64, local_size_y = 1, local_size_z = 1) in;

// Cell data structure for compute shader
struct ComputeCell {
    // Physics:
    vec4 positionAndMass; // x, y, z, mass
    vec4 velocity;        // Fixed to match CPU layout
    vec4 acceleration;    // Fixed to match CPU layout
    vec4 orientation;     // angular stuff in quaternion to prevent gimbal lock
    vec4 angularVelocity;
    vec4 angularAcceleration;
    // Internal:
    vec4 signallingSubstances; // 4 substances for now
    int modeIndex;  // absolute index of the cell's mode
    float age; // also used for split timer
    float toxins;
    float nitrates;
    int adhesionIndices[20];
};

// Instance data structure for rendering with optional fade factor
struct InstanceData {
    vec4 positionAndRadius;  // xyz = position, w = radius
    vec4 color;              // rgba color
    vec4 orientation;        // quaternion (w, x, y, z)
    vec4 fadeFactor;         // Distance-based fade factor (x component) + padding for alignment
};

struct AdhesionSettings
{
    bool canBreak;
    float breakForce;
    float restLength;
    float linearSpringStiffness;
    float linearSpringDamping;
    float orientationSpringStiffness;
    float orientationSpringDamping;
    float maxAngularDeviation; // degrees
};

// GPU Mode structure (matches GPUMode in common_structs.h)
struct GPUMode {
    vec4 color;              // R, G, B, padding
    vec4 orientationA;       // quaternion
    vec4 orientationB;       // quaternion
    vec4 splitDirection;     // x, y, z, padding
    ivec2 childModes;        // mode indices for children
    float splitInterval;
    int genomeOffset;
    AdhesionSettings adhesionSettings;
    int parentMakeAdhesion;  // Boolean flag for adhesion creation
    int padding[3];          // Padding to maintain alignment
};

// Frustum plane structure
struct FrustumPlane {
    vec3 normal;
    float distance;
};

// Input/Output buffers
layout(std430, binding = 0) readonly buffer CellBuffer {
    ComputeCell cellData[];
};

layout(std430, binding = 1) readonly buffer ModeBuffer {
    GPUMode modes[];
};

layout(std430, binding = 2) readonly buffer CellCountBuffer {
    uint totalCellCount;
    uint liveCellCount;
    uint totalAdhesionCount;
    uint freeAdhesionTop;
};

// Unified output buffers - can be used for different modes
layout(std430, binding = 3) buffer OutputBuffer0 {
    InstanceData output0[];
};

layout(std430, binding = 4) buffer OutputBuffer1 {
    InstanceData output1[];
};

layout(std430, binding = 5) buffer OutputBuffer2 {
    InstanceData output2[];
};

layout(std430, binding = 6) buffer OutputBuffer3 {
    InstanceData output3[];
};

layout(std430, binding = 7) buffer CountBuffer {
    uint counts[4];
};

// Frustum planes uniform
uniform FrustumPlane u_frustumPlanes[6];

// Distance culling uniforms
uniform vec3 u_cameraPos;
uniform float u_maxRenderDistance = 170.0;    // Maximum distance to render cells (overridden by config)
uniform float u_fadeStartDistance = 30.0;     // Distance where fading begins (overridden by config)
uniform float u_fadeEndDistance = 160.0;      // Distance where fading ends (overridden by config)

// LOD distance uniforms
uniform float u_lodDistances[4];              // Distance thresholds for each LOD level

// Mode control uniforms
uniform int u_useDistanceCulling = 1;         // Enable distance-based culling
uniform int u_useLOD = 1;                     // Enable LOD system
uniform int u_useFade = 1;                    // Enable distance-based fading

// Test if sphere is inside frustum
bool isSphereInFrustum(vec3 center, float radius) {
    for (int i = 0; i < 6; i++) {
        float distance = dot(u_frustumPlanes[i].normal, center) + u_frustumPlanes[i].distance;
        if (distance < -radius) {
            return false; // Sphere is completely outside this plane
        }
    }
    return true; // Sphere is inside or intersecting the frustum
}

// Calculate fade factor based on distance
float calculateFadeFactor(float distanceToCamera) {
    if (u_useFade == 0) return 1.0;
    
    if (distanceToCamera >= u_fadeEndDistance) {
        return 0.0; // Completely faded out
    } else if (distanceToCamera <= u_fadeStartDistance) {
        return 1.0; // Fully visible
    } else {
        // Smooth fade between start and end distance
        float fadeRange = u_fadeEndDistance - u_fadeStartDistance;
        float fadeProgress = (distanceToCamera - u_fadeStartDistance) / fadeRange;
        // Use smoothstep for more natural fading
        return 1.0 - smoothstep(0.0, 1.0, fadeProgress);
    }
}

// Determine LOD level based on distance
int determineLODLevel(float distanceToCamera) {
    if (u_useLOD == 0) return 0; // Always use highest quality if LOD is disabled
    
    for (int lod = 0; lod < 4; lod++) {
        if (distanceToCamera <= u_lodDistances[lod]) {
            return lod;
        }
    }
    return 3; // Default to lowest LOD if beyond all thresholds
}

void main() {
    uint index = gl_GlobalInvocationID.x;
    
    if (index >= totalCellCount) return;
    
    // Calculate cell radius from mass (assuming sphere volume formula)
    vec3 cellPos = cellData[index].positionAndMass.xyz;
    float cellRadius = pow(cellData[index].positionAndMass.w, 1.0/3.0);
    
    // Calculate distance from camera to cell center
    float distanceToCamera = distance(u_cameraPos, cellPos);
    
    // Early exit if cell is beyond maximum render distance
    if (u_useDistanceCulling != 0 && distanceToCamera > u_maxRenderDistance) {
        return;
    }
    
    // Perform frustum culling test
    if (!isSphereInFrustum(cellPos, cellRadius)) {
        return; // Cell is not visible
    }
    
    // Calculate fade factor based on distance
    float fadeFactor = calculateFadeFactor(distanceToCamera);
    
    // Only add to visible instances if not completely faded out
    if (fadeFactor > 0.001) {
        // Determine LOD level based on distance
        int lodLevel = determineLODLevel(distanceToCamera);
        
        // Create instance data with fade factor
        InstanceData instance;
        instance.positionAndRadius = vec4(cellPos, cellRadius);
        instance.color = modes[cellData[index].modeIndex].color;
        instance.orientation = cellData[index].orientation;
        instance.fadeFactor = vec4(fadeFactor, 0.0, 0.0, 0.0); // Store in x component, rest is padding
        
        // Add to appropriate output buffer
        uint writeIndex = atomicAdd(counts[lodLevel], 1);
        
        switch (lodLevel) {
            case 0:
                output0[writeIndex] = instance;
                break;
            case 1:
                output1[writeIndex] = instance;
                break;
            case 2:
                output2[writeIndex] = instance;
                break;
            case 3:
                output3[writeIndex] = instance;
                break;
        }
    }
} 