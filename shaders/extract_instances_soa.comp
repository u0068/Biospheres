#version 430 core

layout(local_size_x = 64, local_size_y = 1, local_size_z = 1) in;

// Input: SoA buffers from physics simulation
layout(std430, binding = 0) buffer PositionBuffer {
    vec3 positions[];
};

layout(std430, binding = 1) buffer RadiusBuffer {
    float radii[];
};

// Output: Compact instance data for rendering (position + radius)
layout(std430, binding = 2) buffer InstanceBuffer {
    vec4 instanceData[]; // vec4(position.xyz, radius)
};

uniform int u_cellCount;

void main() {
    uint index = gl_GlobalInvocationID.x;
    
    if (index >= u_cellCount) return;
    
    // Combine position and radius into a single vec4 for instanced rendering
    instanceData[index] = vec4(positions[index], radii[index]);
}
