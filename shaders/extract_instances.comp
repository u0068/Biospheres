#version 430 core

layout(local_size_x = 64, local_size_y = 1, local_size_z = 1) in;

// Input: Full cell data from physics simulation

// mode data structure for compute shader
struct GPUMode {
    vec3 color;
    float splitInterval;
    float genomeOffset;
    vec2 splitOrientation;
    ivec2 childModes;
};

// Cell data structure for compute shader
struct ComputeCell {
    // Physics:
    vec4 positionAndMass; // x, y, z, mass
    vec3 velocity;
    vec3 acceleration;
    vec4 orientation; // angular stuff in quaternion to prevent gimbal lock
    vec4 angularVelocity;
    vec4 angularAcceleration;
    // Internal:
    vec4 signallingSubstances; // 4 substances for now
    int modeIndex;
    float age; // also used for split timer
    float toxins;
    float nitrates;
};

struct InstanceData {
    vec4 positionAndRadius;
    vec4 color;
};

layout(std430, binding = 0) buffer CellBuffer {
    // Cell structure: positionAndRadius, velocityAndMass, acceleration
    ComputeCell cellData[];
};

layout(std430, binding = 1) restrict buffer modeBuffer {
    GPUMode modes[];
};

// Output: Compact instance data for rendering
layout(std430, binding = 2) buffer InstanceBuffer {
    InstanceData instanceData[]; // Only position, radius an color
};

uniform int u_cellCount;

void main() {
    uint index = gl_GlobalInvocationID.x;
    
    if (index >= u_cellCount) return;
    
    float myRadius = pow(cellData[index].positionAndMass.w, 1./3.);
    instanceData[index].positionAndRadius = vec4(cellData[index].positionAndMass.xyz, myRadius);
    instanceData[index].color = vec4(modes[cellData[index].modeIndex].color, 0.);
}
