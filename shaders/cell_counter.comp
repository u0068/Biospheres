#version 430 core
layout(local_size_x = 64, local_size_y = 1, local_size_z = 1) in;

struct ComputeCell {
    vec4 positionAndMass;
    vec4 velocity;        // Fixed to match CPU layout
    vec4 acceleration;    // Fixed to match CPU layout
    vec4 orientation;
    vec4 angularVelocity;
    vec4 angularAcceleration;
    vec4 signallingSubstances;
    int modeIndex;
    float age;
    float toxins;
    float nitrates;
    // Unique ID system
    uint uniqueID;     // Packed ID: [parent(16)] [cell(15)] [child(1)]
    uint padding1;     // Padding to maintain alignment
    uvec2 padding2;    // Additional padding to ensure 16-byte alignment
};

layout(std430, binding = 0) buffer CellBuffer {
    ComputeCell cells[];
};

layout(std430, binding = 1) buffer CellCountBuffer {
    uint cellCount;
    uint pendingCellCount;
};

uniform int u_maxCells; // At the moment we use the config::MAX_CELLS but in the future we could do something smarter, like previous cellCount + queuedCellCount

void main() {
    uint index = gl_GlobalInvocationID.x;
    if (index >= uint(u_maxCells)) return;

    // Only count alive cells
    atomicAdd(cellCount, uint(cells[index].positionAndMass.w > 0.01));
}