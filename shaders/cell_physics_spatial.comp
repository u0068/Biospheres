#version 430

// Local work group size
layout(local_size_x = 64, local_size_y = 1, local_size_z = 1) in;

// Cell data structure for compute shader
struct ComputeCell {
    vec4 positionAndRadius;  // x, y, z, radius
    vec4 velocityAndMass;    // vx, vy, vz, mass
    vec4 acceleration;       // ax, ay, az, unused
};

// Shader storage buffer objects
layout(std430, binding = 0) restrict buffer CellBuffer {
    ComputeCell cells[];
};

layout(std430, binding = 1) restrict buffer GridBuffer {
    uint gridCells[];  // Stores cell indices for each grid cell
};

layout(std430, binding = 2) restrict buffer GridCountBuffer {
    uint gridCounts[];
};

// Uniforms
uniform float u_deltaTime;
uniform int u_cellCount;
uniform float u_damping;
uniform int u_draggedCellIndex; // Index of cell being dragged (-1 if none)
uniform int u_gridResolution;
uniform float u_gridCellSize;
uniform float u_worldSize;
uniform int u_maxCellsPerGrid;

// Function to convert world position to grid coordinates
ivec3 worldToGrid(vec3 worldPos) {
    // Clamp to world bounds first
    vec3 clampedPos = clamp(worldPos, vec3(-u_worldSize * 0.5), vec3(u_worldSize * 0.5));
    
    // Convert to grid coordinates [0, gridResolution)
    vec3 normalizedPos = (clampedPos + u_worldSize * 0.5) / u_worldSize;
    ivec3 gridPos = ivec3(normalizedPos * u_gridResolution);
    
    // Ensure we stay within bounds
    return clamp(gridPos, ivec3(0), ivec3(u_gridResolution - 1));
}

// Function to convert 3D grid coordinates to 1D index
uint gridToIndex(ivec3 gridPos) {
    return uint(gridPos.x + gridPos.y * u_gridResolution + gridPos.z * u_gridResolution * u_gridResolution);
}

// Function to check if grid coordinates are valid
bool isValidGridPos(ivec3 gridPos) {
    return gridPos.x >= 0 && gridPos.x < u_gridResolution &&
           gridPos.y >= 0 && gridPos.y < u_gridResolution &&
           gridPos.z >= 0 && gridPos.z < u_gridResolution;
}

void main() {
    uint index = gl_GlobalInvocationID.x;
    
    // Check bounds
    if (index >= u_cellCount) {
        return;
    }
    
    // Skip physics for dragged cell - it will be positioned directly
    if (int(index) == u_draggedCellIndex) {
        // Clear velocity and acceleration for dragged cell
        cells[index].velocityAndMass.xyz = vec3(0.0);
        cells[index].acceleration = vec4(0.0);
        return;
    }
    
    // Reset acceleration
    cells[index].acceleration = vec4(0.0);
    
    // Calculate forces from nearby cells using spatial partitioning
    vec3 totalForce = vec3(0.0);
    vec3 myPos = cells[index].positionAndRadius.xyz;
    float myRadius = cells[index].positionAndRadius.w;
    float myMass = cells[index].velocityAndMass.w;
    
    // Get the grid cell this cell belongs to
    ivec3 myGridPos = worldToGrid(myPos);
    
    // Check neighboring grid cells (3x3x3 neighborhood)
    for (int dx = -1; dx <= 1; dx++) {
        for (int dy = -1; dy <= 1; dy++) {
            for (int dz = -1; dz <= 1; dz++) {
                ivec3 neighborGridPos = myGridPos + ivec3(dx, dy, dz);
                
                // Skip if neighbor is outside grid bounds
                if (!isValidGridPos(neighborGridPos)) {
                    continue;
                }
                
                uint neighborGridIndex = gridToIndex(neighborGridPos);
                uint cellCount = gridCounts[neighborGridIndex];
                
                // Check all cells in this neighboring grid cell
                for (uint i = 0; i < cellCount && i < u_maxCellsPerGrid; i++) {
                    uint gridBufferIndex = neighborGridIndex * u_maxCellsPerGrid + i;
                    uint otherIndex = gridCells[gridBufferIndex];
                    
                    // Skip self
                    if (otherIndex == index) {
                        continue;
                    }
                    
                    // Skip if other index is out of bounds
                    if (otherIndex >= u_cellCount) {
                        continue;
                    }
                    
                    vec3 otherPos = cells[otherIndex].positionAndRadius.xyz;
                    float otherRadius = cells[otherIndex].positionAndRadius.w;
                    
                    vec3 delta = myPos - otherPos;
                    float distance = length(delta);
                    float minDistance = myRadius + otherRadius;
                    
                    if (distance < minDistance && distance > 0.001) {
                        // Collision detected - apply repulsion force
                        vec3 direction = normalize(delta);
                        float overlap = minDistance - distance;
                        totalForce += direction * overlap * 100.0; // Force strength
                    }
                }
            }
        }
    }
    
    // Store acceleration (F = ma, so a = F/m)
    cells[index].acceleration.xyz = totalForce / myMass;
}
