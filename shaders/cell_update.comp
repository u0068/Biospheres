#version 430 core

// Local work group size
layout(local_size_x = 64, local_size_y = 1, local_size_z = 1) in;

// Cell data structure for compute shader
struct ComputeCell {
    vec4 positionAndRadius;  // x, y, z, radius
    vec4 velocityAndMass;    // vx, vy, vz, mass
    vec4 acceleration;       // ax, ay, az, unused
};

// Shader storage buffer objects
layout(std430, binding = 0) restrict buffer CellBuffer {
    ComputeCell cells[];
};

// Uniforms
uniform float u_deltaTime;
uniform int u_cellCount;
uniform float u_damping;

void main() {
    uint index = gl_GlobalInvocationID.x;
    
    // Check bounds
    if (index >= u_cellCount) {
        return;
    }
    
    // Update velocity based on acceleration
    cells[index].velocityAndMass.xyz += cells[index].acceleration.xyz * u_deltaTime;
    
    // Apply damping
    cells[index].velocityAndMass.xyz *= u_damping;
    
    // Update position based on velocity (Euler integration)
    cells[index].positionAndRadius.xyz += cells[index].velocityAndMass.xyz * u_deltaTime;
    
    // Optional: Add boundary constraints here
    // For example, keep cells within a certain bounds
    vec3 pos = cells[index].positionAndRadius.xyz;
    float bounds = 50.0;
    
    if (abs(pos.x) > bounds) {
        cells[index].positionAndRadius.x = sign(pos.x) * bounds;
        cells[index].velocityAndMass.x *= -0.8; // Bounce with energy loss
    }
    if (abs(pos.y) > bounds) {
        cells[index].positionAndRadius.y = sign(pos.y) * bounds;
        cells[index].velocityAndMass.y *= -0.8;
    }
    if (abs(pos.z) > bounds) {
        cells[index].positionAndRadius.z = sign(pos.z) * bounds;
        cells[index].velocityAndMass.z *= -0.8;
    }
}
