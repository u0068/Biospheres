#version 430

// Local work group size
layout(local_size_x = 64, local_size_y = 1, local_size_z = 1) in;

// Cell data structure for compute shader
struct ComputeCell {
    // Physics:
    vec4 positionAndMass; // x, y, z, mass
    vec3 velocity;
    vec3 acceleration;
    vec4 orientation; // angular stuff in quaternion to prevent gimbal lock
    vec4 angularVelocity;
    vec4 angularAcceleration;
    // Internal:
    vec4 signallingSubstances; // 4 substances for now
    int modeIndex;
    float age; // also used for split timer
    float toxins;
    float nitrates;
};


// Shader storage buffer objects
layout(std430, binding = 0) restrict buffer CellBuffer {
    ComputeCell cells[];
};

layout(std430, binding = 1) restrict buffer GridCountBuffer {
    uint gridCounts[];
};

// Uniforms
uniform int u_cellCount;
uniform int u_gridResolution;
uniform float u_gridCellSize;
uniform float u_worldSize;

// Function to convert world position to grid coordinates
ivec3 worldToGrid(vec3 worldPos) {
    // Clamp to world bounds first
    vec3 clampedPos = clamp(worldPos, vec3(-u_worldSize * 0.5), vec3(u_worldSize * 0.5));
    
    // Convert to grid coordinates [0, gridResolution)
    vec3 normalizedPos = (clampedPos + u_worldSize * 0.5) / u_worldSize;
    ivec3 gridPos = ivec3(normalizedPos * u_gridResolution);
    
    // Ensure we stay within bounds
    return clamp(gridPos, ivec3(0), ivec3(u_gridResolution - 1));
}

// Function to convert 3D grid coordinates to 1D index
uint gridToIndex(ivec3 gridPos) {
    return uint(gridPos.x + gridPos.y * u_gridResolution + gridPos.z * u_gridResolution * u_gridResolution);
}

void main() {
    uint cellIndex = gl_GlobalInvocationID.x;
    
    // Check bounds
    if (cellIndex >= u_cellCount) {
        return;
    }
    
    // Get cell position
    vec3 cellPos = cells[cellIndex].positionAndMass.xyz;
    
    // Convert to grid coordinates
    ivec3 gridPos = worldToGrid(cellPos);
    uint gridIndex = gridToIndex(gridPos);
    
    // Atomically increment the count for this grid cell
    atomicAdd(gridCounts[gridIndex], 1);
}
